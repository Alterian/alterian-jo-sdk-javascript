/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import RulegroupPostRequest from '../com.alterian.jo.model/RulegroupPostRequest';
import TargetEnum from '../com.alterian.jo.model/TargetEnum';

/**
* Rulegroups service.
* @module api/RulegroupsApi
* @version 4.29.139
*/
export default class RulegroupsApi {

    /**
    * Constructs a new RulegroupsApi. 
    * @alias module:api/RulegroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Download the rulegroup file (JSON)
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname rulegroup name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadRulegroupClientTargetRulegroupnameGetWithHttpInfo(client, target, rulegroupname) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling downloadRulegroupClientTargetRulegroupnameGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling downloadRulegroupClientTargetRulegroupnameGet");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling downloadRulegroupClientTargetRulegroupnameGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/download/rulegroup/{client}/{target}/{rulegroupname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download the rulegroup file (JSON)
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname rulegroup name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadRulegroupClientTargetRulegroupnameGet(client, target, rulegroupname) {
      return this.downloadRulegroupClientTargetRulegroupnameGetWithHttpInfo(client, target, rulegroupname)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all rule groups uploaded by this client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientDeleteWithHttpInfo(client) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientDelete");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all rule groups uploaded by this client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientDelete(client) {
      return this.rulegroupClientDeleteWithHttpInfo(client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all rule groups uploaded by a specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [includeproperties] Do we want all details of each rule group? (default is true).
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'includeproperties': opts['includeproperties'],
        'allversions': opts['allversions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all rule groups uploaded by a specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.includeproperties Do we want all details of each rule group? (default is true).
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientGet(client, opts) {
      return this.rulegroupClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all rule groups uploaded by this client in this target.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Where rulegroup should be published.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientTargetDeleteWithHttpInfo(client, target) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetDelete");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all rule groups uploaded by this client in this target.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Where rulegroup should be published.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientTargetDelete(client, target) {
      return this.rulegroupClientTargetDeleteWithHttpInfo(client, target)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all rule groups uploaded by a specific client in a specific target
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Where rule group should be published.
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [includeproperties] Do we want all details of each rule group? (default is true).
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientTargetGetWithHttpInfo(client, target, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetGet");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'includeproperties': opts['includeproperties'],
        'allversions': opts['allversions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all rule groups uploaded by a specific client in a specific target
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Where rule group should be published.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.includeproperties Do we want all details of each rule group? (default is true).
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientTargetGet(client, target, opts) {
      return this.rulegroupClientTargetGetWithHttpInfo(client, target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy this rule group to the given target.  Also replicates any missing rules
     * @param {String} client client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Possible values: dev | test | prod.
     * @param {String} rulegroupname The name of the rule group that you want to copy
     * @param {Object} opts Optional parameters
     * @param {String} [body] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    rulegroupClientTargetRulegroupnameCopytoPostWithHttpInfo(client, target, rulegroupname, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameCopytoPost");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameCopytoPost");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameCopytoPost");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}/copyto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy this rule group to the given target.  Also replicates any missing rules
     * @param {String} client client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Possible values: dev | test | prod.
     * @param {String} rulegroupname The name of the rule group that you want to copy
     * @param {Object} opts Optional parameters
     * @param {String} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    rulegroupClientTargetRulegroupnameCopytoPost(client, target, rulegroupname, opts) {
      return this.rulegroupClientTargetRulegroupnameCopytoPostWithHttpInfo(client, target, rulegroupname, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all versions of a specific rulegroup.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname The name of the rulegroup you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientTargetRulegroupnameDeleteWithHttpInfo(client, target, rulegroupname) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameDelete");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameDelete");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all versions of a specific rulegroup.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname The name of the rulegroup you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientTargetRulegroupnameDelete(client, target, rulegroupname) {
      return this.rulegroupClientTargetRulegroupnameDeleteWithHttpInfo(client, target, rulegroupname)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all versions of a specified rulegroup
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname rulegroup name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [includeproperties] Do we want all details of each rule group? (default is true).
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientTargetRulegroupnameGetWithHttpInfo(client, target, rulegroupname, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameGet");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'includeproperties': opts['includeproperties'],
        'allversions': opts['allversions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all versions of a specified rulegroup
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname rulegroup name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.includeproperties Do we want all details of each rule group? (default is true).
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientTargetRulegroupnameGet(client, target, rulegroupname, opts) {
      return this.rulegroupClientTargetRulegroupnameGetWithHttpInfo(client, target, rulegroupname, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a file which defines the rulegroup. This will generate and return a version number number.
     * @param {String} client client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Possible values: dev | test | prod.
     * @param {String} rulegroupname The name of the rule group that you want to upload
     * @param {module:com.alterian.jo.model/RulegroupPostRequest} rulegroupPostRequest A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    rulegroupClientTargetRulegroupnamePostWithHttpInfo(client, target, rulegroupname, rulegroupPostRequest) {
      let postBody = rulegroupPostRequest;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnamePost");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnamePost");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnamePost");
      }
      // verify the required parameter 'rulegroupPostRequest' is set
      if (rulegroupPostRequest === undefined || rulegroupPostRequest === null) {
        throw new Error("Missing the required parameter 'rulegroupPostRequest' when calling rulegroupClientTargetRulegroupnamePost");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a file which defines the rulegroup. This will generate and return a version number number.
     * @param {String} client client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Possible values: dev | test | prod.
     * @param {String} rulegroupname The name of the rule group that you want to upload
     * @param {module:com.alterian.jo.model/RulegroupPostRequest} rulegroupPostRequest A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    rulegroupClientTargetRulegroupnamePost(client, target, rulegroupname, rulegroupPostRequest) {
      return this.rulegroupClientTargetRulegroupnamePostWithHttpInfo(client, target, rulegroupname, rulegroupPostRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing rulegroup. This will generate and return a version number.
     * @param {String} client client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Possible values: dev | test | prod.
     * @param {String} rulegroupname The name of the rule group that you want to upload
     * @param {module:com.alterian.jo.model/RulegroupPostRequest} rulegroupPostRequest A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    rulegroupClientTargetRulegroupnamePutWithHttpInfo(client, target, rulegroupname, rulegroupPostRequest) {
      let postBody = rulegroupPostRequest;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnamePut");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnamePut");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnamePut");
      }
      // verify the required parameter 'rulegroupPostRequest' is set
      if (rulegroupPostRequest === undefined || rulegroupPostRequest === null) {
        throw new Error("Missing the required parameter 'rulegroupPostRequest' when calling rulegroupClientTargetRulegroupnamePut");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing rulegroup. This will generate and return a version number.
     * @param {String} client client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Possible values: dev | test | prod.
     * @param {String} rulegroupname The name of the rule group that you want to upload
     * @param {module:com.alterian.jo.model/RulegroupPostRequest} rulegroupPostRequest A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    rulegroupClientTargetRulegroupnamePut(client, target, rulegroupname, rulegroupPostRequest) {
      return this.rulegroupClientTargetRulegroupnamePutWithHttpInfo(client, target, rulegroupname, rulegroupPostRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a specific version of a specific rulegroup on the server.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname The name of the rulegroup you want to delete
     * @param {Number} version The version of the rulegroup you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientTargetRulegroupnameVersionDeleteWithHttpInfo(client, target, rulegroupname, version) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameVersionDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameVersionDelete");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameVersionDelete");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling rulegroupClientTargetRulegroupnameVersionDelete");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a specific version of a specific rulegroup on the server.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname The name of the rulegroup you want to delete
     * @param {Number} version The version of the rulegroup you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientTargetRulegroupnameVersionDelete(client, target, rulegroupname, version) {
      return this.rulegroupClientTargetRulegroupnameVersionDeleteWithHttpInfo(client, target, rulegroupname, version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about a specific version of a specific rulegroup for a specific client
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname rulegroup name
     * @param {Number} version The version of the file you want information for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupClientTargetRulegroupnameVersionGetWithHttpInfo(client, target, rulegroupname, version) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling rulegroupClientTargetRulegroupnameVersionGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling rulegroupClientTargetRulegroupnameVersionGet");
      }
      // verify the required parameter 'rulegroupname' is set
      if (rulegroupname === undefined || rulegroupname === null) {
        throw new Error("Missing the required parameter 'rulegroupname' when calling rulegroupClientTargetRulegroupnameVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling rulegroupClientTargetRulegroupnameVersionGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulegroupname': rulegroupname,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup/{client}/{target}/{rulegroupname}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about a specific version of a specific rulegroup for a specific client
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulegroupname rulegroup name
     * @param {Number} version The version of the file you want information for.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupClientTargetRulegroupnameVersionGet(client, target, rulegroupname, version) {
      return this.rulegroupClientTargetRulegroupnameVersionGetWithHttpInfo(client, target, rulegroupname, version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all rule groups on the server
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [includeproperties] Do we want all details of each rule group? (default is true).
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    rulegroupGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'includeproperties': opts['includeproperties'],
        'allversions': opts['allversions'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rulegroup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all rule groups on the server
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.includeproperties Do we want all details of each rule group? (default is true).
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    rulegroupGet(opts) {
      return this.rulegroupGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * upload a file which defines the rulegroup. This will generate and return a version number.  Please use the   /rulegroup/client/target/name post version now.
     * @param {module:com.alterian.jo.model/RulegroupPostRequest} rulegroupPostRequest A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    rulegroupPostWithHttpInfo(rulegroupPostRequest) {
      let postBody = rulegroupPostRequest;
      // verify the required parameter 'rulegroupPostRequest' is set
      if (rulegroupPostRequest === undefined || rulegroupPostRequest === null) {
        throw new Error("Missing the required parameter 'rulegroupPostRequest' when calling rulegroupPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rulegroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * upload a file which defines the rulegroup. This will generate and return a version number.  Please use the   /rulegroup/client/target/name post version now.
     * @param {module:com.alterian.jo.model/RulegroupPostRequest} rulegroupPostRequest A block of JSON containing the rule group information you want to create.  Note there are many more   properties which you can set to allow you to override parameters of the rules, etc. but the simplest is provided as an   example.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    rulegroupPost(rulegroupPostRequest) {
      return this.rulegroupPostWithHttpInfo(rulegroupPostRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
