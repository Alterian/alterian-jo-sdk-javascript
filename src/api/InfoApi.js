/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import CsvEnum from '../com.alterian.jo.model/CsvEnum';
import TargetEnum from '../com.alterian.jo.model/TargetEnum';

/**
* Info service.
* @module api/InfoApi
* @version 4.29.139
*/
export default class InfoApi {

    /**
    * Constructs a new InfoApi. 
    * @alias module:api/InfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get audit log report
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoAuditlogClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoAuditlogClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'target': opts['target'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/auditlog/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get audit log report
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoAuditlogClientGet(client, opts) {
      return this.infoAuditlogClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get cache data report
     * @param {Object} opts Optional parameters
     * @param {String} [client] Client name
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @param {String} [rulename] Filter for specific rule name
     * @param {module:com.alterian.jo.model/String} [cachedirection] Get only cache read or writes
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoCachedataClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'target': opts['target'],
        'rulename': opts['rulename'],
        'cachedirection': opts['cachedirection'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/cachedata/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get cache data report
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Client name
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @param {String} opts.rulename Filter for specific rule name
     * @param {module:com.alterian.jo.model/String} opts.cachedirection Get only cache read or writes
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoCachedataClientGet(opts) {
      return this.infoCachedataClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a report on all the cache columns that are no longer used by any rules
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoCacheunusedcolumnsClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoCacheunusedcolumnsClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'target': opts['target'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/cacheunusedcolumns/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a report on all the cache columns that are no longer used by any rules
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoCacheunusedcolumnsClientGet(client, opts) {
      return this.infoCacheunusedcolumnsClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on the users able to access given client
     * @param {Object} opts Optional parameters
     * @param {String} [client] Which client would you like the access information for? You must be able to access this client to   report on it.
     * @param {Boolean} [includeClientAll = true)] Should users with access to all clients be included
     * @param {Boolean} [includePermissionAll = true)] Should users with permission ALL be included
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoClientaccessreportClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'includeClientAll': opts['includeClientAll'],
        'includePermissionAll': opts['includePermissionAll'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/clientaccessreport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on the users able to access given client
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Which client would you like the access information for? You must be able to access this client to   report on it.
     * @param {Boolean} opts.includeClientAll Should users with access to all clients be included (default to true)
     * @param {Boolean} opts.includePermissionAll Should users with permission ALL be included (default to true)
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoClientaccessreportClientGet(opts) {
      return this.infoClientaccessreportClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the consistency report
     * Compares this nodes resources with other nodes to see if node has latest information
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoConsistencyreportGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/consistencyreport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the consistency report
     * Compares this nodes resources with other nodes to see if node has latest information
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoConsistencyreportGet(opts) {
      return this.infoConsistencyreportGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on the conversation usage by a specific client
     * @param {module:com.alterian.jo.model/String} timeseries Report on either the last 60 minutes, the last 48 hours or the last 60 days
     * @param {Object} opts Optional parameters
     * @param {String} [client] Which client would you like the conversation statistics for? You must be able to access this client   to report on it.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoConversationusagereportClientTimeseriesGetWithHttpInfo(timeseries, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'timeseries' is set
      if (timeseries === undefined || timeseries === null) {
        throw new Error("Missing the required parameter 'timeseries' when calling infoConversationusagereportClientTimeseriesGet");
      }

      let pathParams = {
        'timeseries': timeseries,
        'client': opts['client']
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/conversationusagereport/{client}/{timeseries}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on the conversation usage by a specific client
     * @param {module:com.alterian.jo.model/String} timeseries Report on either the last 60 minutes, the last 48 hours or the last 60 days
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Which client would you like the conversation statistics for? You must be able to access this client   to report on it.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoConversationusagereportClientTimeseriesGet(timeseries, opts) {
      return this.infoConversationusagereportClientTimeseriesGetWithHttpInfo(timeseries, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on how fields are created, read and written within a rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @param {Boolean} [mergefields = false)] Should fields that have been renamed be merged together?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoFieldusageTargetClientRulenameGetWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling infoFieldusageTargetClientRulenameGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoFieldusageTargetClientRulenameGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling infoFieldusageTargetClientRulenameGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'format': opts['format'],
        'mergefields': opts['mergefields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/fieldusage/{target}/{client}/{rulename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on how fields are created, read and written within a rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @param {Boolean} opts.mergefields Should fields that have been renamed be merged together? (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoFieldusageTargetClientRulenameGet(target, client, rulename, opts) {
      return this.infoFieldusageTargetClientRulenameGetWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoFlowTargetClientRulenameGetWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling infoFlowTargetClientRulenameGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoFlowTargetClientRulenameGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling infoFlowTargetClientRulenameGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/flow/{target}/{client}/{rulename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the JSON representation of the steps within a rule, suitable for displaying as a flowchart
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoFlowTargetClientRulenameGet(target, client, rulename) {
      return this.infoFlowTargetClientRulenameGetWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get report on global parameters
     * @param {Object} opts Optional parameters
     * @param {String} [client] Client name
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [parameterName] Get the report for a specific parameter
     * @param {String} [parameterValue] Get the report for a specific parameter's value
     * @param {Boolean} [onlyGlobalParameters] Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoGlobalparamreportClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'parameterName': opts['parameterName'],
        'parameterValue': opts['parameterValue'],
        'onlyGlobalParameters': opts['onlyGlobalParameters'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/globalparamreport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get report on global parameters
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Client name
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.parameterName Get the report for a specific parameter
     * @param {String} opts.parameterValue Get the report for a specific parameter's value
     * @param {Boolean} opts.onlyGlobalParameters Only include global parameters. When false will also list rules that would use global parameter if   one with given name was created
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoGlobalparamreportClientGet(opts) {
      return this.infoGlobalparamreportClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * For a given rule, find all the rules that call this rule internally
     * @param {String} client Rule client
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(client, target, rulename, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoInternalrulecallreportClientTargetRulenameGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling infoInternalrulecallreportClientTargetRulenameGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling infoInternalrulecallreportClientTargetRulenameGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'rulename': rulename
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/internalrulecallreport/{client}/{target}/{rulename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * For a given rule, find all the rules that call this rule internally
     * @param {String} client Rule client
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoInternalrulecallreportClientTargetRulenameGet(client, target, rulename, opts) {
      return this.infoInternalrulecallreportClientTargetRulenameGetWithHttpInfo(client, target, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get report on logged 404 errors
     * @param {Object} opts Optional parameters
     * @param {String} [client] Client name
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Number} [limit] Limit the number of results returned. By default set to 100 when not provided.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoLogged404sClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'limit': opts['limit'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/logged404s/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get report on logged 404 errors
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Client name
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Number} opts.limit Limit the number of results returned. By default set to 100 when not provided.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoLogged404sClientGet(opts) {
      return this.infoLogged404sClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pass in an array of any size containing resource URL's (rules, templates, etc) to see if they exist and can   be accessed by this user.
     * @param {String} body A json array of any number of resource urls prefixed by type. Supports rule, template, queue,   globalparameter and rulegroup
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoResourceexistsreportPostWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling infoResourceexistsreportPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/resourceexistsreport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pass in an array of any size containing resource URL's (rules, templates, etc) to see if they exist and can   be accessed by this user.
     * @param {String} body A json array of any number of resource urls prefixed by type. Supports rule, template, queue,   globalparameter and rulegroup
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoResourceexistsreportPost(body) {
      return this.infoResourceexistsreportPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on the complexity of the various rules for a client
     * @param {String} client Limit the report to only the rules used by this client. You must be able to access this client to   report on it.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoRulecomplexityreportClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoRulecomplexityreportClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'format': opts['format'],
        'target': opts['target']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/rulecomplexityreport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on the complexity of the various rules for a client
     * @param {String} client Limit the report to only the rules used by this client. You must be able to access this client to   report on it.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoRulecomplexityreportClientGet(client, opts) {
      return this.infoRulecomplexityreportClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on whether rules can be snoozed
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoSnoozeGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'target': opts['target']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/snooze', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on whether rules can be snoozed
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoSnoozeGet(opts) {
      return this.infoSnoozeGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear the execution statistics histogram for all step types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoSteptypestatisticsDeleteWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/steptypestatistics', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Clear the execution statistics histogram for all step types
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoSteptypestatisticsDelete() {
      return this.infoSteptypestatisticsDeleteWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find out the execution statistics histogram for each step type
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoSteptypestatisticsGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/steptypestatistics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find out the execution statistics histogram for each step type
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoSteptypestatisticsGet(opts) {
      return this.infoSteptypestatisticsGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on the steps being used by this client
     * @param {String} client Limit the report to only the steps used by this client. You must be able to access this client to   report on it.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoSteptypeusagereportClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling infoSteptypeusagereportClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'format': opts['format'],
        'target': opts['target']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/steptypeusagereport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on the steps being used by this client
     * @param {String} client Limit the report to only the steps used by this client. You must be able to access this client to   report on it.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoSteptypeusagereportClientGet(client, opts) {
      return this.infoSteptypeusagereportClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find out which rules are using a specific step type
     * @param {String} stepname type of step that must exist in the rules returned
     * @param {Object} opts Optional parameters
     * @param {String} [client] Filter the rules returned to only the ones in this client. Use * to match all clients visible to your   user
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoStepusagereportClientStepnameGetWithHttpInfo(stepname, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'stepname' is set
      if (stepname === undefined || stepname === null) {
        throw new Error("Missing the required parameter 'stepname' when calling infoStepusagereportClientStepnameGet");
      }

      let pathParams = {
        'stepname': stepname,
        'client': opts['client']
      };
      let queryParams = {
        'target': opts['target'],
        'from': opts['from'],
        'to': opts['to'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/stepusagereport/{client}/{stepname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find out which rules are using a specific step type
     * @param {String} stepname type of step that must exist in the rules returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Filter the rules returned to only the ones in this client. Use * to match all clients visible to your   user
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoStepusagereportClientStepnameGet(stepname, opts) {
      return this.infoStepusagereportClientStepnameGetWithHttpInfo(stepname, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Report on the names of the columns in the cache used by templates
     * @param {Object} opts Optional parameters
     * @param {String} [client] Limit the report to only the templates used by this client. You must be able to access this client to   report on it.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoTemplatecolumnreportClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/templatecolumnreport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Report on the names of the columns in the cache used by templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Limit the report to only the templates used by this client. You must be able to access this client to   report on it.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoTemplatecolumnreportClientGet(opts) {
      return this.infoTemplatecolumnreportClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all templates that expect given input fields
     * @param {Object} opts Optional parameters
     * @param {String} [client] Limit the report to only the templates used by this client. You must be able to access this client to   report on it.
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Array.<String>} [inputFields] Name of input fields to search for
     * @param {Boolean} [allversions] Do we want to check all template versions or only latest?
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoTemplateinputreportClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'inputFields': this.apiClient.buildCollectionParam(opts['inputFields'], 'multi'),
        'allversions': opts['allversions'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/templateinputreport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all templates that expect given input fields
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Limit the report to only the templates used by this client. You must be able to access this client to   report on it.
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Array.<String>} opts.inputFields Name of input fields to search for
     * @param {Boolean} opts.allversions Do we want to check all template versions or only latest?
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoTemplateinputreportClientGet(opts) {
      return this.infoTemplateinputreportClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find a list of rules which use a specific template
     * @param {String} templatename The name of the template that is used by the rule
     * @param {Object} opts Optional parameters
     * @param {String} [client] Filter the rules returned to only this client. Use * to match all clients
     * @param {String} [templateClient] Filter to only templates with this client
     * @param {String} [templateVersion] Filter to only templates with this version
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} [target] Filters on target
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoTemplateusagereportClientTemplatenameGetWithHttpInfo(templatename, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling infoTemplateusagereportClientTemplatenameGet");
      }

      let pathParams = {
        'templatename': templatename,
        'client': opts['client']
      };
      let queryParams = {
        'templateClient': opts['templateClient'],
        'templateVersion': opts['templateVersion'],
        'from': opts['from'],
        'to': opts['to'],
        'target': opts['target'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/templateusagereport/{client}/{templatename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find a list of rules which use a specific template
     * @param {String} templatename The name of the template that is used by the rule
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Filter the rules returned to only this client. Use * to match all clients
     * @param {String} opts.templateClient Filter to only templates with this client
     * @param {String} opts.templateVersion Filter to only templates with this version
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/TargetEnum} opts.target Filters on target
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoTemplateusagereportClientTemplatenameGet(templatename, opts) {
      return this.infoTemplateusagereportClientTemplatenameGetWithHttpInfo(templatename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reports on validity of uploaded templates
     * @param {Object} opts Optional parameters
     * @param {String} [client] Client name
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoTemplatevalidityreportClientGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'client': opts['client']
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/templatevalidityreport/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reports on validity of uploaded templates
     * @param {Object} opts Optional parameters
     * @param {String} opts.client Client name
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoTemplatevalidityreportClientGet(opts) {
      return this.infoTemplatevalidityreportClientGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Reports on token access and last used date.
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [user] Optional query parameter to specify the user
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @param {String} [token] Optional token for which to obtain the last used report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoTokenusereportGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'user': opts['user'],
        'format': opts['format']
      };
      let headerParams = {
        'token': opts['token']
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/tokenusereport', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Reports on token access and last used date.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.user Optional query parameter to specify the user
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @param {String} opts.token Optional token for which to obtain the last used report
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoTokenusereportGet(opts) {
      return this.infoTokenusereportGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Worker thread usage
     * Worker threads execute steps within rules. This report shows what they are doing
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    infoWorkerthreadusageGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/info/workerthreadusage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Worker thread usage
     * Worker threads execute steps within rules. This report shows what they are doing
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    infoWorkerthreadusageGet(opts) {
      return this.infoWorkerthreadusageGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
