/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import ClusterPostRequest from '../com.alterian.jo.model/ClusterPostRequest';
import ClusterPutRequest from '../com.alterian.jo.model/ClusterPutRequest';

/**
* Cluster service.
* @module api/ClusterApi
* @version 4.29.139
*/
export default class ClusterApi {

    /**
    * Constructs a new ClusterApi. 
    * @alias module:api/ClusterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Remove this node from the cluster
     * @param {String} targetnode Must match the private IP address of the node, so there is no ambiguity when decommissioning
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    clusterDecommissionDeleteWithHttpInfo(targetnode) {
      let postBody = null;
      // verify the required parameter 'targetnode' is set
      if (targetnode === undefined || targetnode === null) {
        throw new Error("Missing the required parameter 'targetnode' when calling clusterDecommissionDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'targetnode': targetnode
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster/decommission', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove this node from the cluster
     * @param {String} targetnode Must match the private IP address of the node, so there is no ambiguity when decommissioning
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    clusterDecommissionDelete(targetnode) {
      return this.clusterDecommissionDeleteWithHttpInfo(targetnode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes from the cluster a down node that has not been seen for the longest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    clusterDeleteWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/cluster', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Removes from the cluster a down node that has not been seen for the longest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    clusterDelete() {
      return this.clusterDeleteWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Ask the cluster to rerun the discovery process.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterDiscoverPostWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Ask the cluster to rerun the discovery process.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterDiscoverPost() {
      return this.clusterDiscoverPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make sure all data in internal caches across the entire cluster are written to disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterFlushPostWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster/flush', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make sure all data in internal caches across the entire cluster are written to disk
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterFlushPost() {
      return this.clusterFlushPostWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find out what instances are in the cluster
     * @param {Object} opts Optional parameters
     * @param {Boolean} [update] Also ping the other instances in the cluster to check that they are present.
     * @param {Boolean} [repair] Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up
     * @param {Boolean} [includeSettings] Include extended details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'update': opts['update'],
        'repair': opts['repair'],
        'includeSettings': opts['includeSettings']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find out what instances are in the cluster
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.update Also ping the other instances in the cluster to check that they are present.
     * @param {Boolean} opts.repair Request an immediate repair so this instance will definitely contain the same rules, templates, etc   as the other instances in this cluster. Only works if all instances are up
     * @param {Boolean} opts.includeSettings Include extended details
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterGet(opts) {
      return this.clusterGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Register an instance with the cluster
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/ClusterPostRequest} [clusterPostRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['clusterPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Register an instance with the cluster
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/ClusterPostRequest} opts.clusterPostRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterPost(opts) {
      return this.clusterPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an advanced cluster setting
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/ClusterPutRequest} [clusterPutRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterPutWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['clusterPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an advanced cluster setting
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/ClusterPutRequest} opts.clusterPutRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterPut(opts) {
      return this.clusterPutWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make this note reregister itself with all the other nodes in the cluster without requiring a restart
     * @param {Object} opts Optional parameters
     * @param {String} [body] Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterReregisterPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/text'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster/reregister', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make this note reregister itself with all the other nodes in the cluster without requiring a restart
     * @param {Object} opts Optional parameters
     * @param {String} opts.body Optional address of one seed node to register with. Same syntax as seed parameter in web.xml,   ipaddress:port
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterReregisterPost(opts) {
      return this.clusterReregisterPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find out the streaming status of an instance in the cluster
     * @param {Object} opts Optional parameters
     * @param {String} [targetnode] Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterStreamGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'targetnode': opts['targetnode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster/stream', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find out the streaming status of an instance in the cluster
     * @param {Object} opts Optional parameters
     * @param {String} opts.targetnode Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterStreamGet(opts) {
      return this.clusterStreamGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find out the current stream throughput (Mb per sec) of an instance in the cluster
     * @param {Object} opts Optional parameters
     * @param {String} [targetnode] Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterStreamThroughputGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'targetnode': opts['targetnode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster/stream/throughput', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find out the current stream throughput (Mb per sec) of an instance in the cluster
     * @param {Object} opts Optional parameters
     * @param {String} opts.targetnode Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterStreamThroughputGet(opts) {
      return this.clusterStreamThroughputGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set the current stream throughput (Mb per sec) of an instance in the cluster
     * @param {Number} throughput The maximum data rate in Mb/s that this node can send across all streams.
     * @param {Object} opts Optional parameters
     * @param {String} [targetnode] Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    clusterStreamThroughputPostWithHttpInfo(throughput, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'throughput' is set
      if (throughput === undefined || throughput === null) {
        throw new Error("Missing the required parameter 'throughput' when calling clusterStreamThroughputPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'targetnode': opts['targetnode'],
        'throughput': throughput
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/cluster/stream/throughput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set the current stream throughput (Mb per sec) of an instance in the cluster
     * @param {Number} throughput The maximum data rate in Mb/s that this node can send across all streams.
     * @param {Object} opts Optional parameters
     * @param {String} opts.targetnode Which instance (identified by host name) do you want to query? Leave blank to pick an instance   randomly
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    clusterStreamThroughputPost(throughput, opts) {
      return this.clusterStreamThroughputPostWithHttpInfo(throughput, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
