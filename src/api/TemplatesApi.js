/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import Client from '../com.alterian.jo.model/Client';
import ResourceAndStatusResponse from '../com.alterian.jo.model/ResourceAndStatusResponse';
import TargetEnum from '../com.alterian.jo.model/TargetEnum';
import TemplateList from '../com.alterian.jo.model/TemplateList';
import TemplatePublishSettings from '../com.alterian.jo.model/TemplatePublishSettings';
import TemplateUpgradeResponse from '../com.alterian.jo.model/TemplateUpgradeResponse';

/**
* Templates service.
* @module api/TemplatesApi
* @version 4.29.139
*/
export default class TemplatesApi {

    /**
    * Constructs a new TemplatesApi. 
    * @alias module:api/TemplatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadTemplateClientTemplatenameGetWithHttpInfo(client, templatename) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling downloadTemplateClientTemplatenameGet");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling downloadTemplateClientTemplatenameGet");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/download/template/{client}/{templatename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadTemplateClientTemplatenameGet(client, templatename) {
      return this.downloadTemplateClientTemplatenameGetWithHttpInfo(client, templatename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the file you want to download.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadTemplateClientTemplatenameVersionGetWithHttpInfo(client, templatename, version) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling downloadTemplateClientTemplatenameVersionGet");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling downloadTemplateClientTemplatenameVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling downloadTemplateClientTemplatenameVersionGet");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/download/template/{client}/{templatename}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download the rule file for a specific version of a specific template for a specific client
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the file you want to download.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadTemplateClientTemplatenameVersionGet(client, templatename, version) {
      return this.downloadTemplateClientTemplatenameVersionGetWithHttpInfo(client, templatename, version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all templates uploaded by this client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    templateClientDeleteWithHttpInfo(client) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientDelete");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/template/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all templates uploaded by this client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    templateClientDelete(client) {
      return this.templateClientDeleteWithHttpInfo(client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all templates uploaded by a specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @param {Boolean} [getAllDetails] Do we want to retrieve details of Data Grids present in this template.
     * @param {Boolean} [basicInfo] Only retrieve the basic information about this template, like name, client and url template.
     * @param {String} [targetClient] Request template's Data Grids' details with parameter information for this client.
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {Boolean} [includePublic] Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/TemplateList} and HTTP response
     */
    templateClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'allversions': opts['allversions'],
        'getAllDetails': opts['getAllDetails'],
        'basicInfo': opts['basicInfo'],
        'targetClient': opts['targetClient'],
        'searchText': opts['searchText'],
        'includePublic': opts['includePublic'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateList;
      return this.apiClient.callApi(
        '/template/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all templates uploaded by a specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @param {Boolean} opts.getAllDetails Do we want to retrieve details of Data Grids present in this template.
     * @param {Boolean} opts.basicInfo Only retrieve the basic information about this template, like name, client and url template.
     * @param {String} opts.targetClient Request template's Data Grids' details with parameter information for this client.
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {Boolean} opts.includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/TemplateList}
     */
    templateClientGet(client, opts) {
      return this.templateClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all versions of a specific template.
     * @param {String} client Client name
     * @param {String} templatename The name of the template you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    templateClientTemplatenameDeleteWithHttpInfo(client, templatename) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenameDelete");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenameDelete");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all versions of a specific template.
     * @param {String} client Client name
     * @param {String} templatename The name of the template you want to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    templateClientTemplatenameDelete(client, templatename) {
      return this.templateClientTemplatenameDeleteWithHttpInfo(client, templatename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all versions of a specified template
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @param {Boolean} [getAllDetails] Do we want to retrieve details of Data Grids present in this template.
     * @param {String} [targetClient] Request template's Data Grids' details with parameter information for this client.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/TemplateList} and HTTP response
     */
    templateClientTemplatenameGetWithHttpInfo(client, templatename, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenameGet");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenameGet");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'allversions': opts['allversions'],
        'getAllDetails': opts['getAllDetails'],
        'targetClient': opts['targetClient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateList;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all versions of a specified template
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @param {Boolean} opts.getAllDetails Do we want to retrieve details of Data Grids present in this template.
     * @param {String} opts.targetClient Request template's Data Grids' details with parameter information for this client.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/TemplateList}
     */
    templateClientTemplatenameGet(client, templatename, opts) {
      return this.templateClientTemplatenameGetWithHttpInfo(client, templatename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate] Set to 'True' to only validate the JSON (and not save it)
     * @param {File} [file] 
     * @param {String} [settings] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ResourceAndStatusResponse} and HTTP response
     */
    templateClientTemplatenamePostWithHttpInfo(client, templatename, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenamePost");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenamePost");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename
      };
      let queryParams = {
        'validate': opts['validate']
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'settings': opts['settings']
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ResourceAndStatusResponse;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a KTR file which defines the functionality of the template. This will generate and return a version   number.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Set to 'True' to only validate the JSON (and not save it)
     * @param {File} opts.file 
     * @param {String} opts.settings 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ResourceAndStatusResponse}
     */
    templateClientTemplatenamePost(client, templatename, opts) {
      return this.templateClientTemplatenamePostWithHttpInfo(client, templatename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] The JSON containing additional settings for this template.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ResourceAndStatusResponse} and HTTP response
     */
    templateClientTemplatenamePutWithHttpInfo(client, templatename, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenamePut");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenamePut");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceAndStatusResponse;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Alter the settings of the most recent version of an existing template. This will generate and return a new   version number.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body The JSON containing additional settings for this template.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ResourceAndStatusResponse}
     */
    templateClientTemplatenamePut(client, templatename, opts) {
      return this.templateClientTemplatenamePutWithHttpInfo(client, templatename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a specific version of a specific template on the server.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    templateClientTemplatenameVersionDeleteWithHttpInfo(client, templatename, version) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenameVersionDelete");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenameVersionDelete");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling templateClientTemplatenameVersionDelete");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a specific version of a specific template on the server.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    templateClientTemplatenameVersionDelete(client, templatename, version) {
      return this.templateClientTemplatenameVersionDeleteWithHttpInfo(client, templatename, version)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about a specific version of a specific template for a specific client
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {Boolean} [getAllDetails] Do we want to retrieve details of Data Grids present in this template.
     * @param {String} [targetClient] Request template's Data Grids' details with parameter information for this client.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/TemplateList} and HTTP response
     */
    templateClientTemplatenameVersionGetWithHttpInfo(client, templatename, version, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenameVersionGet");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenameVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling templateClientTemplatenameVersionGet");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename,
        'version': version
      };
      let queryParams = {
        'getAllDetails': opts['getAllDetails'],
        'targetClient': opts['targetClient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateList;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about a specific version of a specific template for a specific client
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.getAllDetails Do we want to retrieve details of Data Grids present in this template.
     * @param {String} opts.targetClient Request template's Data Grids' details with parameter information for this client.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/TemplateList}
     */
    templateClientTemplatenameVersionGet(client, templatename, version, opts) {
      return this.templateClientTemplatenameVersionGetWithHttpInfo(client, templatename, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get an upgraded version of template
     * Post a JSON representing a Rule Designer's tile to retrieve a JSON tile where the template version has   been upgraded
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] JSON representing the current template to upgrade
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/TemplateUpgradeResponse} and HTTP response
     */
    templateClientTemplatenameVersionPostWithHttpInfo(client, templatename, version, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateClientTemplatenameVersionPost");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateClientTemplatenameVersionPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling templateClientTemplatenameVersionPost");
      }

      let pathParams = {
        'client': client,
        'templatename': templatename,
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateUpgradeResponse;
      return this.apiClient.callApi(
        '/template/{client}/{templatename}/{version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get an upgraded version of template
     * Post a JSON representing a Rule Designer's tile to retrieve a JSON tile where the template version has   been upgraded
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body JSON representing the current template to upgrade
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/TemplateUpgradeResponse}
     */
    templateClientTemplatenameVersionPost(client, templatename, version, opts) {
      return this.templateClientTemplatenameVersionPostWithHttpInfo(client, templatename, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all templates on the server
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [allversions] Do we want all versions of the file listed?
     * @param {Boolean} [getAllDetails] Do we want to retrieve details of Data Grids present in this template.
     * @param {Boolean} [basicInfo] Only retrieve the basic information about this template, like name, client and url template.
     * @param {String} [targetClient] Request template's Data Grids' details with parameter information for this client.
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {Boolean} [includePublic] Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/TemplateList} and HTTP response
     */
    templateGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'allversions': opts['allversions'],
        'getAllDetails': opts['getAllDetails'],
        'basicInfo': opts['basicInfo'],
        'targetClient': opts['targetClient'],
        'searchText': opts['searchText'],
        'includePublic': opts['includePublic'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TemplateList;
      return this.apiClient.callApi(
        '/template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all templates on the server
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.allversions Do we want all versions of the file listed?
     * @param {Boolean} opts.getAllDetails Do we want to retrieve details of Data Grids present in this template.
     * @param {Boolean} opts.basicInfo Only retrieve the basic information about this template, like name, client and url template.
     * @param {String} opts.targetClient Request template's Data Grids' details with parameter information for this client.
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {Boolean} opts.includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/TemplateList}
     */
    templateGet(opts) {
      return this.templateGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Take a specific version of a template and publish it as a rule.
     * If a rule is already published at this target then it will be 'hot-swapped' with this new version with no   interruption to service.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/String} [paramSource] When overwriting an existing rule, this determines which value to use
     * @param {String} [targetClient] Request template's Data Grids' details with parameter information for this client.
     * @param {module:com.alterian.jo.model/TemplatePublishSettings} [templatePublishSettings] The JSON containing additional settings for this template.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ResourceAndStatusResponse} and HTTP response
     */
    templateTargetClientTemplatenameVersionPostWithHttpInfo(target, client, templatename, version, opts) {
      opts = opts || {};
      let postBody = opts['templatePublishSettings'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling templateTargetClientTemplatenameVersionPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateTargetClientTemplatenameVersionPost");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateTargetClientTemplatenameVersionPost");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling templateTargetClientTemplatenameVersionPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'templatename': templatename,
        'version': version
      };
      let queryParams = {
        'paramSource': opts['paramSource'],
        'targetClient': opts['targetClient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceAndStatusResponse;
      return this.apiClient.callApi(
        '/template/{target}/{client}/{templatename}/{version}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Take a specific version of a template and publish it as a rule.
     * If a rule is already published at this target then it will be 'hot-swapped' with this new version with no   interruption to service.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/String} opts.paramSource When overwriting an existing rule, this determines which value to use
     * @param {String} opts.targetClient Request template's Data Grids' details with parameter information for this client.
     * @param {module:com.alterian.jo.model/TemplatePublishSettings} opts.templatePublishSettings The JSON containing additional settings for this template.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ResourceAndStatusResponse}
     */
    templateTargetClientTemplatenameVersionPost(target, client, templatename, version, opts) {
      return this.templateTargetClientTemplatenameVersionPostWithHttpInfo(target, client, templatename, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
     * If a rule is already published at this target then it will be 'hot-swapped' with this new version with no   interruption to service.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {String} [targetClient] Request template's Data Grids' details with parameter information for this client.
     * @param {module:com.alterian.jo.model/Client} [client2] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    templateTargetClientTemplatenameVersionPutWithHttpInfo(target, client, templatename, version, opts) {
      opts = opts || {};
      let postBody = opts['client2'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling templateTargetClientTemplatenameVersionPut");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling templateTargetClientTemplatenameVersionPut");
      }
      // verify the required parameter 'templatename' is set
      if (templatename === undefined || templatename === null) {
        throw new Error("Missing the required parameter 'templatename' when calling templateTargetClientTemplatenameVersionPut");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling templateTargetClientTemplatenameVersionPut");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'templatename': templatename,
        'version': version
      };
      let queryParams = {
        'targetClient': opts['targetClient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/template/{target}/{client}/{templatename}/{version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Take a specific version of a template and publish it as a rule. and check if overwriting an existing rule   which has a different template
     * If a rule is already published at this target then it will be 'hot-swapped' with this new version with no   interruption to service.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} templatename The name of the template
     * @param {Number} version The version of the template
     * @param {Object} opts Optional parameters
     * @param {String} opts.targetClient Request template's Data Grids' details with parameter information for this client.
     * @param {module:com.alterian.jo.model/Client} opts.client2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    templateTargetClientTemplatenameVersionPut(target, client, templatename, version, opts) {
      return this.templateTargetClientTemplatenameVersionPutWithHttpInfo(target, client, templatename, version, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
