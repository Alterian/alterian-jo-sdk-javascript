/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import TargetEnum from '../com.alterian.jo.model/TargetEnum';

/**
* Recording service.
* @module api/RecordingApi
* @version 4.30.49
*/
export default class RecordingApi {

    /**
    * Constructs a new RecordingApi. 
    * @alias module:api/RecordingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete all recordings created by this client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientDeleteWithHttpInfo(client) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientDelete");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all recordings created by this client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientDelete(client) {
      return this.recordingClientDeleteWithHttpInfo(client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all recordings created by a specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all recordings created by a specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientGet(client, opts) {
      return this.recordingClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all recordings created by this client in this target.
     * @param {String} client Filter recordings to this client
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientTargetDeleteWithHttpInfo(client, target) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetDelete");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}/{target}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all recordings created by this client in this target.
     * @param {String} client Filter recordings to this client
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientTargetDelete(client, target) {
      return this.recordingClientTargetDeleteWithHttpInfo(client, target)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all recordings created by a specific client in a specific target
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Which target should we filter to?
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientTargetGetWithHttpInfo(client, target, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetGet");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all recordings created by a specific client in a specific target
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Which target should we filter to?
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientTargetGet(client, target, opts) {
      return this.recordingClientTargetGetWithHttpInfo(client, target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a specific recording.
     * @param {String} client Filter recordings to this client
     * @param {module:com.alterian.jo.model/TargetEnum} target Filter recordings to this target
     * @param {String} name The name of the recording
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientTargetNameDeleteWithHttpInfo(client, target, name) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetNameDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetNameDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recordingClientTargetNameDelete");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}/{target}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a specific recording.
     * @param {String} client Filter recordings to this client
     * @param {module:com.alterian.jo.model/TargetEnum} target Filter recordings to this target
     * @param {String} name The name of the recording
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientTargetNameDelete(client, target, name) {
      return this.recordingClientTargetNameDeleteWithHttpInfo(client, target, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get raw event traffic associated with this specific recording
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Which target should we filter to?
     * @param {String} name The name of the recording
     * @param {Object} opts Optional parameters
     * @param {String} [since] Optional 'since' values for paging large data - pass in the value from the last row returned. Use instead of 'From'
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientTargetNameEventsGetWithHttpInfo(client, target, name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetNameEventsGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetNameEventsGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recordingClientTargetNameEventsGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'name': name
      };
      let queryParams = {
        'since': opts['since'],
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}/{target}/{name}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get raw event traffic associated with this specific recording
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Which target should we filter to?
     * @param {String} name The name of the recording
     * @param {Object} opts Optional parameters
     * @param {String} opts.since Optional 'since' values for paging large data - pass in the value from the last row returned. Use instead of 'From'
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientTargetNameEventsGet(client, target, name, opts) {
      return this.recordingClientTargetNameEventsGetWithHttpInfo(client, target, name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about a specific recording
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Which target should we filter to?
     * @param {String} name The name of the recording
     * @param {Object} opts Optional parameters
     * @param {Boolean} [analysis] Should the server also perform analysis of the recorded data so that common items can be identified?
     * @param {Boolean} [force] Analysis data is cached. Should the cached data be cleared and the analysis be re-performed on the   raw data?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientTargetNameGetWithHttpInfo(client, target, name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetNameGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetNameGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recordingClientTargetNameGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'name': name
      };
      let queryParams = {
        'analysis': opts['analysis'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}/{target}/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about a specific recording
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Which target should we filter to?
     * @param {String} name The name of the recording
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.analysis Should the server also perform analysis of the recorded data so that common items can be identified?
     * @param {Boolean} opts.force Analysis data is cached. Should the cached data be cleared and the analysis be re-performed on the   raw data?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientTargetNameGet(client, target, name, opts) {
      return this.recordingClientTargetNameGetWithHttpInfo(client, target, name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit the details of a specific recording.
     * @param {String} client The client that this recording belongs to
     * @param {module:com.alterian.jo.model/TargetEnum} target The target that this recording belongs to
     * @param {String} name The name of the existing recording
     * @param {Object} opts Optional parameters
     * @param {String} [body] JSON containing optional additional settings for this recording.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    recordingClientTargetNamePutWithHttpInfo(client, target, name, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetNamePut");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetNamePut");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recordingClientTargetNamePut");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/recording/{client}/{target}/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Edit the details of a specific recording.
     * @param {String} client The client that this recording belongs to
     * @param {module:com.alterian.jo.model/TargetEnum} target The target that this recording belongs to
     * @param {String} name The name of the existing recording
     * @param {Object} opts Optional parameters
     * @param {String} opts.body JSON containing optional additional settings for this recording.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    recordingClientTargetNamePut(client, target, name, opts) {
      return this.recordingClientTargetNamePutWithHttpInfo(client, target, name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start or stop recording traffic for this client and target
     * @param {String} client The client to start recording traffic for
     * @param {module:com.alterian.jo.model/TargetEnum} target The target to start recording traffic for
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/String} [action] Start or stop recording. Will toggle the current recording state (i.e. start->stop or stop->start) if   not specified.
     * @param {String} [body] JSON containing optional additional settings for this recording.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingClientTargetPostWithHttpInfo(client, target, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling recordingClientTargetPost");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling recordingClientTargetPost");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording/{client}/{target}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start or stop recording traffic for this client and target
     * @param {String} client The client to start recording traffic for
     * @param {module:com.alterian.jo.model/TargetEnum} target The target to start recording traffic for
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/String} opts.action Start or stop recording. Will toggle the current recording state (i.e. start->stop or stop->start) if   not specified.
     * @param {String} opts.body JSON containing optional additional settings for this recording.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingClientTargetPost(client, target, opts) {
      return this.recordingClientTargetPostWithHttpInfo(client, target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details about all recordings in the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordingGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/recording', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get details about all recordings in the cluster
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordingGet(opts) {
      return this.recordingGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
