/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CacheApiDeleteResponse from '../com.alterian.jo.model/CacheApiDeleteResponse';
import CacheApiResponse from '../com.alterian.jo.model/CacheApiResponse';
import CacheCQL from '../com.alterian.jo.model/CacheCQL';
import CacheChangesResponse from '../com.alterian.jo.model/CacheChangesResponse';
import CacheDetailsResponse from '../com.alterian.jo.model/CacheDetailsResponse';
import CacheExecuteResponse from '../com.alterian.jo.model/CacheExecuteResponse';
import CacheTableDefinition from '../com.alterian.jo.model/CacheTableDefinition';
import TableTypeEnum from '../com.alterian.jo.model/TableTypeEnum';
import TargetEnum from '../com.alterian.jo.model/TargetEnum';

/**
* Cache service.
* @module api/CacheApi
* @version 4.30.49
*/
export default class CacheApi {

    /**
    * Constructs a new CacheApi. 
    * @alias module:api/CacheApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get information about cache tables, filtered by client.
     * Get information about cache tables, filtered by client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheDetailsResponse} and HTTP response
     */
    cacheClientGetWithHttpInfo(client) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = CacheDetailsResponse;
      return this.apiClient.callApi(
        '/cache/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about cache tables, filtered by client.
     * Get information about cache tables, filtered by client.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheDetailsResponse}
     */
    cacheClientGet(client) {
      return this.cacheClientGetWithHttpInfo(client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Execute a limited set of cql commands against the cache
     * insert, select, update or delete a single row of data from a single table
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CacheCQL} [cacheCQL] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheExecuteResponse} and HTTP response
     */
    cacheClientTargetExecutePostWithHttpInfo(client, target, opts) {
      opts = opts || {};
      let postBody = opts['cacheCQL'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetExecutePost");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetExecutePost");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = CacheExecuteResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Execute a limited set of cql commands against the cache
     * insert, select, update or delete a single row of data from a single table
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CacheCQL} opts.cacheCQL 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheExecuteResponse}
     */
    cacheClientTargetExecutePost(client, target, opts) {
      return this.cacheClientTargetExecutePostWithHttpInfo(client, target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about cache tables, filtered by client and target.
     * Get information about cache tables, filtered by client and target.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/TableTypeEnum} [tabletype] If you only want a certain type of table, provide it here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheDetailsResponse} and HTTP response
     */
    cacheClientTargetGetWithHttpInfo(client, target, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetGet");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
        'tabletype': opts['tabletype']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = CacheDetailsResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about cache tables, filtered by client and target.
     * Get information about cache tables, filtered by client and target.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/TableTypeEnum} opts.tabletype If you only want a certain type of table, provide it here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheDetailsResponse}
     */
    cacheClientTargetGet(client, target, opts) {
      return this.cacheClientTargetGetWithHttpInfo(client, target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete column from a cache table.
     * Removes a column from a cache table.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {String} column Column name
     * @param {Object} opts Optional parameters
     * @param {String} [key] Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning.
     * @param {Array.<String>} [keys] Values for clustering keys. If the table has a composite key, provide the values in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheApiResponse} and HTTP response
     */
    cacheClientTargetTableColumnDeleteWithHttpInfo(client, target, table, column, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetTableColumnDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetTableColumnDelete");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling cacheClientTargetTableColumnDelete");
      }
      // verify the required parameter 'column' is set
      if (column === undefined || column === null) {
        throw new Error("Missing the required parameter 'column' when calling cacheClientTargetTableColumnDelete");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'table': table,
        'column': column
      };
      let queryParams = {
        'key': opts['key'],
        'keys': this.apiClient.buildCollectionParam(opts['keys'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CacheApiResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}/{table}/{column}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete column from a cache table.
     * Removes a column from a cache table.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {String} column Column name
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Pass DESTROY_COLUMN if you would like to remove a column.  Note, there is no recovery for these   actions and removing a column which is used will cause your rules to cease functioning.
     * @param {Array.<String>} opts.keys Values for clustering keys. If the table has a composite key, provide the values in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheApiResponse}
     */
    cacheClientTargetTableColumnDelete(client, target, table, column, opts) {
      return this.cacheClientTargetTableColumnDeleteWithHttpInfo(client, target, table, column, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete unused cache table and columns
     * Removes the columns and tables that are no longer used by any of the rules
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {Boolean} preview By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheApiDeleteResponse} and HTTP response
     */
    cacheClientTargetTableColumnsDeleteWithHttpInfo(client, target, table, preview) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetTableColumnsDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetTableColumnsDelete");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling cacheClientTargetTableColumnsDelete");
      }
      // verify the required parameter 'preview' is set
      if (preview === undefined || preview === null) {
        throw new Error("Missing the required parameter 'preview' when calling cacheClientTargetTableColumnsDelete");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'table': table
      };
      let queryParams = {
        'preview': preview
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CacheApiDeleteResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}/{table}/columns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete unused cache table and columns
     * Removes the columns and tables that are no longer used by any of the rules
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {Boolean} preview By default API works in preview mode and returns a list of cache columns and tables that would be   dropped. Only when preview set to false the columns are actually dropped
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheApiDeleteResponse}
     */
    cacheClientTargetTableColumnsDelete(client, target, table, preview) {
      return this.cacheClientTargetTableColumnsDeleteWithHttpInfo(client, target, table, preview)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete data from a cache table.
     * Removes data from a cache table.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {Object} opts Optional parameters
     * @param {String} [key] Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning.
     * @param {Array.<String>} [keys] Values for clustering keys. If the table has a composite key, provide the values in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheApiResponse} and HTTP response
     */
    cacheClientTargetTableDeleteWithHttpInfo(client, target, table, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetTableDelete");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetTableDelete");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling cacheClientTargetTableDelete");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'table': table
      };
      let queryParams = {
        'key': opts['key'],
        'keys': this.apiClient.buildCollectionParam(opts['keys'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CacheApiResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}/{table}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete data from a cache table.
     * Removes data from a cache table.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {Object} opts Optional parameters
     * @param {String} opts.key Key to delete from cache tables; provide DELETE_ALL to clear the table and DESTROY_TABLE if you would   like to remove the table.  Note, there is no recovery for these actions and removing a table which is used will cause   your rules to cease functioning.
     * @param {Array.<String>} opts.keys Values for clustering keys. If the table has a composite key, provide the values in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheApiResponse}
     */
    cacheClientTargetTableDelete(client, target, table, opts) {
      return this.cacheClientTargetTableDeleteWithHttpInfo(client, target, table, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about a specific cache table.
     * Get information about a specific cache table.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {Object} opts Optional parameters
     * @param {String} [key] If you want a row of data to be returned, provide the partition key
     * @param {Array.<String>} [keys] Values for clustering keys. If the table has a composite key, provide the values in order.
     * @param {Number} [sample] return a sample of n rows from the table
     * @param {Boolean} [pivot] Would you like the data pivoted? (Only for CSV report)
     * @param {module:com.alterian.jo.model/String} [fieldvalue] If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key
     * @param {Number} [limit] If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheDetailsResponse} and HTTP response
     */
    cacheClientTargetTableGetWithHttpInfo(client, target, table, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetTableGet");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetTableGet");
      }
      // verify the required parameter 'table' is set
      if (table === undefined || table === null) {
        throw new Error("Missing the required parameter 'table' when calling cacheClientTargetTableGet");
      }

      let pathParams = {
        'client': client,
        'target': target,
        'table': table
      };
      let queryParams = {
        'key': opts['key'],
        'keys': this.apiClient.buildCollectionParam(opts['keys'], 'multi'),
        'sample': opts['sample'],
        'pivot': opts['pivot'],
        'fieldvalue': opts['fieldvalue'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = CacheDetailsResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}/{table}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about a specific cache table.
     * Get information about a specific cache table.
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} table Table name
     * @param {Object} opts Optional parameters
     * @param {String} opts.key If you want a row of data to be returned, provide the partition key
     * @param {Array.<String>} opts.keys Values for clustering keys. If the table has a composite key, provide the values in order.
     * @param {Number} opts.sample return a sample of n rows from the table
     * @param {Boolean} opts.pivot Would you like the data pivoted? (Only for CSV report)
     * @param {module:com.alterian.jo.model/String} opts.fieldvalue If this is a fieldvalue type table, you can ask for a list of keys or values.  If you specify   fieldvalues, you must also provide a key
     * @param {Number} opts.limit If you are asking for a list of values from a fieldvalue table, you can request to return only the   most recent, limited to this number.  If not provided, a system limit will be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheDetailsResponse}
     */
    cacheClientTargetTableGet(client, target, table, opts) {
      return this.cacheClientTargetTableGetWithHttpInfo(client, target, table, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Alter a cache table
     * Ensure that the cache table includes at least the set of columns requested
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CacheTableDefinition} [cacheTableDefinition] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/CacheChangesResponse} and HTTP response
     */
    cacheClientTargetTablePostWithHttpInfo(client, target, opts) {
      opts = opts || {};
      let postBody = opts['cacheTableDefinition'];
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling cacheClientTargetTablePost");
      }
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling cacheClientTargetTablePost");
      }

      let pathParams = {
        'client': client,
        'target': target
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = CacheChangesResponse;
      return this.apiClient.callApi(
        '/cache/{client}/{target}/table', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Alter a cache table
     * Ensure that the cache table includes at least the set of columns requested
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CacheTableDefinition} opts.cacheTableDefinition 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/CacheChangesResponse}
     */
    cacheClientTargetTablePost(client, target, opts) {
      return this.cacheClientTargetTablePostWithHttpInfo(client, target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
