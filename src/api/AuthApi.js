/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import PermissionList from '../com.alterian.jo.model/PermissionList';
import RefList from '../com.alterian.jo.model/RefList';
import Role from '../com.alterian.jo.model/Role';
import RoleList from '../com.alterian.jo.model/RoleList';
import SiteList from '../com.alterian.jo.model/SiteList';
import UserList from '../com.alterian.jo.model/UserList';

/**
* Auth service.
* @module api/AuthApi
* @version 4.29.139
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get a list of all permissions
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/PermissionList} and HTTP response
     */
    authPermissionGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/auth/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of all permissions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/PermissionList}
     */
    authPermissionGet(opts) {
      return this.authPermissionGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of roles
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RoleList} and HTTP response
     */
    authRoleGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleList;
      return this.apiClient.callApi(
        '/auth/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RoleList}
     */
    authRoleGet(opts) {
      return this.authRoleGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove client from a role
     * @param {String} name Role Name
     * @param {String} clientName Client that will have this role removed from it
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authRoleNameClientClientNameDeleteWithHttpInfo(name, clientName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNameClientClientNameDelete");
      }
      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling authRoleNameClientClientNameDelete");
      }

      let pathParams = {
        'name': name,
        'clientName': clientName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/role/{name}/client/{clientName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove client from a role
     * @param {String} name Role Name
     * @param {String} clientName Client that will have this role removed from it
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authRoleNameClientClientNameDelete(name, clientName) {
      return this.authRoleNameClientClientNameDeleteWithHttpInfo(name, clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add client to a role
     * @param {String} name Role Name
     * @param {String} clientName Client to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authRoleNameClientClientNamePostWithHttpInfo(name, clientName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNameClientClientNamePost");
      }
      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling authRoleNameClientClientNamePost");
      }

      let pathParams = {
        'name': name,
        'clientName': clientName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/role/{name}/client/{clientName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add client to a role
     * @param {String} name Role Name
     * @param {String} clientName Client to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authRoleNameClientClientNamePost(name, clientName) {
      return this.authRoleNameClientClientNamePostWithHttpInfo(name, clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of clients for a role
     * @param {String} name Role Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RefList} and HTTP response
     */
    authRoleNameClientGetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNameClientGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefList;
      return this.apiClient.callApi(
        '/auth/role/{name}/client', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of clients for a role
     * @param {String} name Role Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RefList}
     */
    authRoleNameClientGet(name) {
      return this.authRoleNameClientGetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a role
     * @param {String} name Name of role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authRoleNameDeleteWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/role/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a role
     * @param {String} name Name of role to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authRoleNameDelete(name) {
      return this.authRoleNameDeleteWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about a specific role
     * @param {String} name The role to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RoleList} and HTTP response
     */
    authRoleNameGetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleList;
      return this.apiClient.callApi(
        '/auth/role/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about a specific role
     * @param {String} name The role to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RoleList}
     */
    authRoleNameGet(name) {
      return this.authRoleNameGetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove permission from a role
     * @param {String} name Role to alter
     * @param {String} permission Permission to remove from role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authRoleNamePermissionDeleteWithHttpInfo(name, permission) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNamePermissionDelete");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling authRoleNamePermissionDelete");
      }

      let pathParams = {
        'name': name,
        'permission': permission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/role/{name}/{permission}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove permission from a role
     * @param {String} name Role to alter
     * @param {String} permission Permission to remove from role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authRoleNamePermissionDelete(name, permission) {
      return this.authRoleNamePermissionDeleteWithHttpInfo(name, permission)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of permissions granted by a specific role
     * @param {String} name Role Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/PermissionList} and HTTP response
     */
    authRoleNamePermissionGetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNamePermissionGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/auth/role/{name}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of permissions granted by a specific role
     * @param {String} name Role Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/PermissionList}
     */
    authRoleNamePermissionGet(name) {
      return this.authRoleNamePermissionGetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add permission to a role
     * @param {String} name Role to alter
     * @param {String} permission Permission to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authRoleNamePermissionPostWithHttpInfo(name, permission) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authRoleNamePermissionPost");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling authRoleNamePermissionPost");
      }

      let pathParams = {
        'name': name,
        'permission': permission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/role/{name}/{permission}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add permission to a role
     * @param {String} name Role to alter
     * @param {String} permission Permission to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authRoleNamePermissionPost(name, permission) {
      return this.authRoleNamePermissionPostWithHttpInfo(name, permission)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new role
     * @param {module:com.alterian.jo.model/Role} role 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authRolePostWithHttpInfo(role) {
      let postBody = role;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling authRolePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new role
     * @param {module:com.alterian.jo.model/Role} role 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authRolePost(role) {
      return this.authRolePostWithHttpInfo(role)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of sites
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/SiteList} and HTTP response
     */
    authSiteGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteList;
      return this.apiClient.callApi(
        '/auth/site', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of sites
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/SiteList}
     */
    authSiteGet(opts) {
      return this.authSiteGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a site
     * @param {String} id Site identifer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authSiteIdDeleteWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authSiteIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/site/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a site
     * @param {String} id Site identifer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authSiteIdDelete(id) {
      return this.authSiteIdDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about specified site
     * @param {String} id The site to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/SiteList} and HTTP response
     */
    authSiteIdGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authSiteIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SiteList;
      return this.apiClient.callApi(
        '/auth/site/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about specified site
     * @param {String} id The site to retrieve
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/SiteList}
     */
    authSiteIdGet(id) {
      return this.authSiteIdGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of site users
     * @param {String} id Site identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RefList} and HTTP response
     */
    authSiteIdUserGetWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authSiteIdUserGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefList;
      return this.apiClient.callApi(
        '/auth/site/{id}/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of site users
     * @param {String} id Site identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RefList}
     */
    authSiteIdUserGet(id) {
      return this.authSiteIdUserGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user from a site
     * @param {String} id Site identifier
     * @param {String} name User to remove from site
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authSiteIdUserNameDeleteWithHttpInfo(id, name) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authSiteIdUserNameDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authSiteIdUserNameDelete");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/site/{id}/user/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove user from a site
     * @param {String} id Site identifier
     * @param {String} name User to remove from site
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authSiteIdUserNameDelete(id, name) {
      return this.authSiteIdUserNameDeleteWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add user to a site
     * @param {String} id Site identifier
     * @param {String} name User Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authSiteIdUserNamePostWithHttpInfo(id, name) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling authSiteIdUserNamePost");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authSiteIdUserNamePost");
      }

      let pathParams = {
        'id': id,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/site/{id}/user/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add user to a site
     * @param {String} id Site identifier
     * @param {String} name User Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authSiteIdUserNamePost(id, name) {
      return this.authSiteIdUserNamePostWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new site
     * @param {String} body A block of JSON describing the resource to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authSitePostWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authSitePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/site', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new site
     * @param {String} body A block of JSON describing the resource to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authSitePost(body) {
      return this.authSitePostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of users
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {Boolean} [getAllDetails] Do we want to retrieve details of user tokens. (default) false will return only token names
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/UserList} and HTTP response
     */
    authUserGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'getAllDetails': opts['getAllDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/auth/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of users
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {Boolean} opts.getAllDetails Do we want to retrieve details of user tokens. (default) false will return only token names
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/UserList}
     */
    authUserGet(opts) {
      return this.authUserGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove client access from user
     * @param {String} name user Name
     * @param {String} clientName Client to remove from user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameClientClientNameDeleteWithHttpInfo(name, clientName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameClientClientNameDelete");
      }
      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling authUserNameClientClientNameDelete");
      }

      let pathParams = {
        'name': name,
        'clientName': clientName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/client/{clientName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove client access from user
     * @param {String} name user Name
     * @param {String} clientName Client to remove from user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameClientClientNameDelete(name, clientName) {
      return this.authUserNameClientClientNameDeleteWithHttpInfo(name, clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add client access to user
     * @param {String} name User Name
     * @param {String} clientName Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameClientClientNamePostWithHttpInfo(name, clientName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameClientClientNamePost");
      }
      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling authUserNameClientClientNamePost");
      }

      let pathParams = {
        'name': name,
        'clientName': clientName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/client/{clientName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add client access to user
     * @param {String} name User Name
     * @param {String} clientName Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameClientClientNamePost(name, clientName) {
      return this.authUserNameClientClientNamePostWithHttpInfo(name, clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of clients to which a user has been granted access
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RefList} and HTTP response
     */
    authUserNameClientGetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameClientGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefList;
      return this.apiClient.callApi(
        '/auth/user/{name}/client', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of clients to which a user has been granted access
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RefList}
     */
    authUserNameClientGet(name) {
      return this.authUserNameClientGetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a user
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameDeleteWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a user
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameDelete(name) {
      return this.authUserNameDeleteWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about specified user
     * @param {String} name The user to retrieve
     * @param {Object} opts Optional parameters
     * @param {Boolean} [getAllDetails] Do we want to retrieve details of user tokens. (default) false will return only token names
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/UserList} and HTTP response
     */
    authUserNameGetWithHttpInfo(name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'getAllDetails': opts['getAllDetails']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/auth/user/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about specified user
     * @param {String} name The user to retrieve
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.getAllDetails Do we want to retrieve details of user tokens. (default) false will return only token names
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/UserList}
     */
    authUserNameGet(name, opts) {
      return this.authUserNameGetWithHttpInfo(name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of user permission
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/PermissionList} and HTTP response
     */
    authUserNamePermissionGetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNamePermissionGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/auth/user/{name}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of user permission
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/PermissionList}
     */
    authUserNamePermissionGet(name) {
      return this.authUserNamePermissionGetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove permission from a user
     * @param {String} name user Name
     * @param {String} permission Permission to remove from user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNamePermissionPermissionDeleteWithHttpInfo(name, permission) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNamePermissionPermissionDelete");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling authUserNamePermissionPermissionDelete");
      }

      let pathParams = {
        'name': name,
        'permission': permission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/permission/{permission}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove permission from a user
     * @param {String} name user Name
     * @param {String} permission Permission to remove from user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNamePermissionPermissionDelete(name, permission) {
      return this.authUserNamePermissionPermissionDeleteWithHttpInfo(name, permission)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add permission to a user
     * @param {String} name User Name
     * @param {String} permission Permission to add to user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNamePermissionPermissionPostWithHttpInfo(name, permission) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNamePermissionPermissionPost");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling authUserNamePermissionPermissionPost");
      }

      let pathParams = {
        'name': name,
        'permission': permission
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/permission/{permission}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add permission to a user
     * @param {String} name User Name
     * @param {String} permission Permission to add to user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNamePermissionPermissionPost(name, permission) {
      return this.authUserNamePermissionPermissionPostWithHttpInfo(name, permission)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the list of the roles which have been assigned to a user
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RefList} and HTTP response
     */
    authUserNameRoleGetWithHttpInfo(name) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameRoleGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefList;
      return this.apiClient.callApi(
        '/auth/user/{name}/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the list of the roles which have been assigned to a user
     * @param {String} name user Name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RefList}
     */
    authUserNameRoleGet(name) {
      return this.authUserNameRoleGetWithHttpInfo(name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove role from a user
     * @param {String} name user Name
     * @param {String} roleName Role to remove from user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameRoleRoleNameDeleteWithHttpInfo(name, roleName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameRoleRoleNameDelete");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling authUserNameRoleRoleNameDelete");
      }

      let pathParams = {
        'name': name,
        'roleName': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/role/{roleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove role from a user
     * @param {String} name user Name
     * @param {String} roleName Role to remove from user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameRoleRoleNameDelete(name, roleName) {
      return this.authUserNameRoleRoleNameDeleteWithHttpInfo(name, roleName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign role to user
     * @param {String} name user Name
     * @param {String} roleName Role to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameRoleRoleNamePostWithHttpInfo(name, roleName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameRoleRoleNamePost");
      }
      // verify the required parameter 'roleName' is set
      if (roleName === undefined || roleName === null) {
        throw new Error("Missing the required parameter 'roleName' when calling authUserNameRoleRoleNamePost");
      }

      let pathParams = {
        'name': name,
        'roleName': roleName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/role/{roleName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign role to user
     * @param {String} name user Name
     * @param {String} roleName Role to add
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameRoleRoleNamePost(name, roleName) {
      return this.authUserNameRoleRoleNamePostWithHttpInfo(name, roleName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove static access token from user
     * @param {String} name user Name
     * @param {String} tokenName Descriptive name for the token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameTokenTokenNameDeleteWithHttpInfo(name, tokenName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameTokenTokenNameDelete");
      }
      // verify the required parameter 'tokenName' is set
      if (tokenName === undefined || tokenName === null) {
        throw new Error("Missing the required parameter 'tokenName' when calling authUserNameTokenTokenNameDelete");
      }

      let pathParams = {
        'name': name,
        'tokenName': tokenName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/token/{tokenName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove static access token from user
     * @param {String} name user Name
     * @param {String} tokenName Descriptive name for the token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameTokenTokenNameDelete(name, tokenName) {
      return this.authUserNameTokenTokenNameDeleteWithHttpInfo(name, tokenName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add static access token to user
     * @param {String} name User Name
     * @param {String} tokenName Descriptive name for the token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserNameTokenTokenNamePostWithHttpInfo(name, tokenName) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling authUserNameTokenTokenNamePost");
      }
      // verify the required parameter 'tokenName' is set
      if (tokenName === undefined || tokenName === null) {
        throw new Error("Missing the required parameter 'tokenName' when calling authUserNameTokenTokenNamePost");
      }

      let pathParams = {
        'name': name,
        'tokenName': tokenName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user/{name}/token/{tokenName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add static access token to user
     * @param {String} name User Name
     * @param {String} tokenName Descriptive name for the token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserNameTokenTokenNamePost(name, tokenName) {
      return this.authUserNameTokenTokenNamePostWithHttpInfo(name, tokenName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new user
     * @param {String} body A block of JSON describing the resource to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    authUserPostWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authUserPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/auth/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new user
     * @param {String} body A block of JSON describing the resource to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    authUserPost(body) {
      return this.authUserPostWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
