/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import LicenseData from '../com.alterian.jo.model/LicenseData';
import LicenseList from '../com.alterian.jo.model/LicenseList';

/**
* License service.
* @module api/LicenseApi
* @version 4.29.139
*/
export default class LicenseApi {

    /**
    * Constructs a new LicenseApi. 
    * @alias module:api/LicenseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get the currently active license for a client
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/LicenseList} and HTTP response
     */
    licenseClientActiveGetWithHttpInfo(client) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling licenseClientActiveGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseList;
      return this.apiClient.callApi(
        '/license/{client}/active', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the currently active license for a client
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/LicenseList}
     */
    licenseClientActiveGet(client) {
      return this.licenseClientActiveGetWithHttpInfo(client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all licenses for the specified client
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/LicenseList} and HTTP response
     */
    licenseClientGetWithHttpInfo(client) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling licenseClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseList;
      return this.apiClient.callApi(
        '/license/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all licenses for the specified client
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/LicenseList}
     */
    licenseClientGet(client) {
      return this.licenseClientGetWithHttpInfo(client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete specified license
     * @param {String} client Client name
     * @param {String} license License to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    licenseClientLicenseDeleteWithHttpInfo(client, license) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling licenseClientLicenseDelete");
      }
      // verify the required parameter 'license' is set
      if (license === undefined || license === null) {
        throw new Error("Missing the required parameter 'license' when calling licenseClientLicenseDelete");
      }

      let pathParams = {
        'client': client,
        'license': license
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/license/{client}/{license}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete specified license
     * @param {String} client Client name
     * @param {String} license License to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    licenseClientLicenseDelete(client, license) {
      return this.licenseClientLicenseDeleteWithHttpInfo(client, license)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific license
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {String} [license] License to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/LicenseList} and HTTP response
     */
    licenseClientLicenseGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling licenseClientLicenseGet");
      }

      let pathParams = {
        'client': client,
        'license': opts['license']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseList;
      return this.apiClient.callApi(
        '/license/{client}/{license}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a specific license
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {String} opts.license License to get
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/LicenseList}
     */
    licenseClientLicenseGet(client, opts) {
      return this.licenseClientLicenseGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new license
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/LicenseData} licenseData 
     * @param {Object} opts Optional parameters
     * @param {String} [license] License name to post; has the same name requirements as the name of a rule; must not contain invalid   characters like \"..\", etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    licenseClientLicensePostWithHttpInfo(client, licenseData, opts) {
      opts = opts || {};
      let postBody = licenseData;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling licenseClientLicensePost");
      }
      // verify the required parameter 'licenseData' is set
      if (licenseData === undefined || licenseData === null) {
        throw new Error("Missing the required parameter 'licenseData' when calling licenseClientLicensePost");
      }

      let pathParams = {
        'client': client,
        'license': opts['license']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/license/{client}/{license}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new license
     * @param {String} client Client name
     * @param {module:com.alterian.jo.model/LicenseData} licenseData 
     * @param {Object} opts Optional parameters
     * @param {String} opts.license License name to post; has the same name requirements as the name of a rule; must not contain invalid   characters like \"..\", etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    licenseClientLicensePost(client, licenseData, opts) {
      return this.licenseClientLicensePostWithHttpInfo(client, licenseData, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create or update a license
     * @param {String} client Client name
     * @param {String} body A block of JSON describing the license
     * @param {Object} opts Optional parameters
     * @param {String} [license] License name to put; has the same name requirements as the name of a rule; must not contain invalid   characters like \"..\", etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    licenseClientLicensePutWithHttpInfo(client, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling licenseClientLicensePut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling licenseClientLicensePut");
      }

      let pathParams = {
        'client': client,
        'license': opts['license']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/license/{client}/{license}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create or update a license
     * @param {String} client Client name
     * @param {String} body A block of JSON describing the license
     * @param {Object} opts Optional parameters
     * @param {String} opts.license License name to put; has the same name requirements as the name of a rule; must not contain invalid   characters like \"..\", etc.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    licenseClientLicensePut(client, body, opts) {
      return this.licenseClientLicensePutWithHttpInfo(client, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all licenses for all clients that your login can access
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/LicenseList} and HTTP response
     */
    licenseGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LicenseList;
      return this.apiClient.callApi(
        '/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all licenses for all clients that your login can access
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/LicenseList}
     */
    licenseGet() {
      return this.licenseGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
