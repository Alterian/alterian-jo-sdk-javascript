/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import Parameter from '../com.alterian.jo.model/Parameter';
import ParameterApiResponse from '../com.alterian.jo.model/ParameterApiResponse';
import ParameterCopyDetails from '../com.alterian.jo.model/ParameterCopyDetails';
import ParameterList from '../com.alterian.jo.model/ParameterList';

/**
* Globalparameter service.
* @module api/GlobalparameterApi
* @version 4.30.49
*/
export default class GlobalparameterApi {

    /**
    * Constructs a new GlobalparameterApi. 
    * @alias module:api/GlobalparameterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Download global parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link File} and HTTP response
     */
    downloadGlobalparameterClientParamnameGetWithHttpInfo(client, paramname) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling downloadGlobalparameterClientParamnameGet");
      }
      // verify the required parameter 'paramname' is set
      if (paramname === undefined || paramname === null) {
        throw new Error("Missing the required parameter 'paramname' when calling downloadGlobalparameterClientParamnameGet");
      }

      let pathParams = {
        'client': client,
        'paramname': paramname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/download/globalparameter/{client}/{paramname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download global parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link File}
     */
    downloadGlobalparameterClientParamnameGet(client, paramname) {
      return this.downloadGlobalparameterClientParamnameGetWithHttpInfo(client, paramname)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get target parameter for for specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [sortProperty] List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} [sortDescending] List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterList} and HTTP response
     */
    globalparameterClientGetWithHttpInfo(client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling globalparameterClientGet");
      }

      let pathParams = {
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'sortProperty': opts['sortProperty'],
        'sortDescending': opts['sortDescending'],
        'searchText': opts['searchText'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParameterList;
      return this.apiClient.callApi(
        '/globalparameter/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get target parameter for for specific client
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} opts.sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterList}
     */
    globalparameterClientGet(client, opts) {
      return this.globalparameterClientGetWithHttpInfo(client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a copy of a Global Parameter and, optionally, delete the original
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @param {module:com.alterian.jo.model/ParameterCopyDetails} parameterCopyDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterApiResponse} and HTTP response
     */
    globalparameterClientParamnameCopyPostWithHttpInfo(client, paramname, parameterCopyDetails) {
      let postBody = parameterCopyDetails;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling globalparameterClientParamnameCopyPost");
      }
      // verify the required parameter 'paramname' is set
      if (paramname === undefined || paramname === null) {
        throw new Error("Missing the required parameter 'paramname' when calling globalparameterClientParamnameCopyPost");
      }
      // verify the required parameter 'parameterCopyDetails' is set
      if (parameterCopyDetails === undefined || parameterCopyDetails === null) {
        throw new Error("Missing the required parameter 'parameterCopyDetails' when calling globalparameterClientParamnameCopyPost");
      }

      let pathParams = {
        'client': client,
        'paramname': paramname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParameterApiResponse;
      return this.apiClient.callApi(
        '/globalparameter/{client}/{paramname}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a copy of a Global Parameter and, optionally, delete the original
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @param {module:com.alterian.jo.model/ParameterCopyDetails} parameterCopyDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterApiResponse}
     */
    globalparameterClientParamnameCopyPost(client, paramname, parameterCopyDetails) {
      return this.globalparameterClientParamnameCopyPostWithHttpInfo(client, paramname, parameterCopyDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @param {module:com.alterian.jo.model/ParameterCopyDetails} parameterCopyDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterApiResponse} and HTTP response
     */
    globalparameterClientParamnameCopyPutWithHttpInfo(client, paramname, parameterCopyDetails) {
      let postBody = parameterCopyDetails;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling globalparameterClientParamnameCopyPut");
      }
      // verify the required parameter 'paramname' is set
      if (paramname === undefined || paramname === null) {
        throw new Error("Missing the required parameter 'paramname' when calling globalparameterClientParamnameCopyPut");
      }
      // verify the required parameter 'parameterCopyDetails' is set
      if (parameterCopyDetails === undefined || parameterCopyDetails === null) {
        throw new Error("Missing the required parameter 'parameterCopyDetails' when calling globalparameterClientParamnameCopyPut");
      }

      let pathParams = {
        'client': client,
        'paramname': paramname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParameterApiResponse;
      return this.apiClient.callApi(
        '/globalparameter/{client}/{paramname}/copy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a copy of a Global Parameter overwriting the target if it exists and, optionally, delete the original
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @param {module:com.alterian.jo.model/ParameterCopyDetails} parameterCopyDetails 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterApiResponse}
     */
    globalparameterClientParamnameCopyPut(client, paramname, parameterCopyDetails) {
      return this.globalparameterClientParamnameCopyPutWithHttpInfo(client, paramname, parameterCopyDetails)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a global parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    globalparameterClientParamnameDeleteWithHttpInfo(client, paramname) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling globalparameterClientParamnameDelete");
      }
      // verify the required parameter 'paramname' is set
      if (paramname === undefined || paramname === null) {
        throw new Error("Missing the required parameter 'paramname' when calling globalparameterClientParamnameDelete");
      }

      let pathParams = {
        'client': client,
        'paramname': paramname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/globalparameter/{client}/{paramname}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a global parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    globalparameterClientParamnameDelete(client, paramname) {
      return this.globalparameterClientParamnameDeleteWithHttpInfo(client, paramname)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get individual Global Parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterList} and HTTP response
     */
    globalparameterClientParamnameGetWithHttpInfo(client, paramname) {
      let postBody = null;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling globalparameterClientParamnameGet");
      }
      // verify the required parameter 'paramname' is set
      if (paramname === undefined || paramname === null) {
        throw new Error("Missing the required parameter 'paramname' when calling globalparameterClientParamnameGet");
      }

      let pathParams = {
        'client': client,
        'paramname': paramname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParameterList;
      return this.apiClient.callApi(
        '/globalparameter/{client}/{paramname}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get individual Global Parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterList}
     */
    globalparameterClientParamnameGet(client, paramname) {
      return this.globalparameterClientParamnameGetWithHttpInfo(client, paramname)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Global Parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @param {module:com.alterian.jo.model/Parameter} parameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterApiResponse} and HTTP response
     */
    globalparameterClientParamnamePutWithHttpInfo(client, paramname, parameter) {
      let postBody = parameter;
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling globalparameterClientParamnamePut");
      }
      // verify the required parameter 'paramname' is set
      if (paramname === undefined || paramname === null) {
        throw new Error("Missing the required parameter 'paramname' when calling globalparameterClientParamnamePut");
      }
      // verify the required parameter 'parameter' is set
      if (parameter === undefined || parameter === null) {
        throw new Error("Missing the required parameter 'parameter' when calling globalparameterClientParamnamePut");
      }

      let pathParams = {
        'client': client,
        'paramname': paramname
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParameterApiResponse;
      return this.apiClient.callApi(
        '/globalparameter/{client}/{paramname}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Global Parameter
     * @param {String} client Client name
     * @param {String} paramname parameter name
     * @param {module:com.alterian.jo.model/Parameter} parameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterApiResponse}
     */
    globalparameterClientParamnamePut(client, paramname, parameter) {
      return this.globalparameterClientParamnamePutWithHttpInfo(client, paramname, parameter)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get global parameters for all clients
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [sortProperty] List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} [sortDescending] List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterList} and HTTP response
     */
    globalparameterGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'sortProperty': opts['sortProperty'],
        'sortDescending': opts['sortDescending'],
        'searchText': opts['searchText'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ParameterList;
      return this.apiClient.callApi(
        '/globalparameter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get global parameters for all clients
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} opts.sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterList}
     */
    globalparameterGet(opts) {
      return this.globalparameterGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create Global Parameter (will fail if already exists)
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/Parameter} [parameter] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ParameterApiResponse} and HTTP response
     */
    globalparameterPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['parameter'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParameterApiResponse;
      return this.apiClient.callApi(
        '/globalparameter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Global Parameter (will fail if already exists)
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/Parameter} opts.parameter 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ParameterApiResponse}
     */
    globalparameterPost(opts) {
      return this.globalparameterPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
