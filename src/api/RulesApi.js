/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiJSONArrayResponse from '../com.alterian.jo.model/ApiJSONArrayResponse';
import ApiResponse from '../com.alterian.jo.model/ApiResponse';
import CsvEnum from '../com.alterian.jo.model/CsvEnum';
import DataGridApiResponse from '../com.alterian.jo.model/DataGridApiResponse';
import DataGridDetails from '../com.alterian.jo.model/DataGridDetails';
import DataGridRow from '../com.alterian.jo.model/DataGridRow';
import DestinationTarget from '../com.alterian.jo.model/DestinationTarget';
import HealthScoreTimeFrame from '../com.alterian.jo.model/HealthScoreTimeFrame';
import RuleAndStateResponse from '../com.alterian.jo.model/RuleAndStateResponse';
import RuleData from '../com.alterian.jo.model/RuleData';
import RuleDesignerResponse from '../com.alterian.jo.model/RuleDesignerResponse';
import RuleList from '../com.alterian.jo.model/RuleList';
import TargetEnum from '../com.alterian.jo.model/TargetEnum';
import TestData from '../com.alterian.jo.model/TestData';
import TestDataResponse from '../com.alterian.jo.model/TestDataResponse';

/**
* Rules service.
* @module api/RulesApi
* @version 4.29.139
*/
export default class RulesApi {

    /**
    * Constructs a new RulesApi. 
    * @alias module:api/RulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Download the rule file (KTR) for a running rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    downloadRuleTargetClientRulenameGetWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling downloadRuleTargetClientRulenameGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling downloadRuleTargetClientRulenameGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling downloadRuleTargetClientRulenameGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/download/rule/{target}/{client}/{rulename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download the rule file (KTR) for a running rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    downloadRuleTargetClientRulenameGet(target, client, rulename) {
      return this.downloadRuleTargetClientRulenameGetWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about all published rules on the server
     * Information returned is filtered by user permissions.
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [sortProperty] List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} [sortDescending] List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} [createdRuleUrl] The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} [healthScore] Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} [includeStatistics] Should the results include the execution statistics for each rule? Default true
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {String} [parameterName] Get the report for a specific parameter
     * @param {String} [parameterValue] Get a list of rules which have a specific parameter value
     * @param {String} [templateFilter] Filter to return only rules using specified template
     * @param {Boolean} [includePublic] Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Boolean} [checkTemplateLatestVersion] Should a check to verify rule has the latest templates version be performed?
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'sortProperty': opts['sortProperty'],
        'sortDescending': opts['sortDescending'],
        'createdRuleUrl': opts['createdRuleUrl'],
        'healthScore': opts['healthScore'],
        'includeStatistics': opts['includeStatistics'],
        'searchText': opts['searchText'],
        'parameterName': opts['parameterName'],
        'parameterValue': opts['parameterValue'],
        'templateFilter': opts['templateFilter'],
        'includePublic': opts['includePublic'],
        'checkTemplateLatestVersion': opts['checkTemplateLatestVersion'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about all published rules on the server
     * Information returned is filtered by user permissions.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} opts.sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} opts.createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} opts.healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} opts.includeStatistics Should the results include the execution statistics for each rule? Default true
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {String} opts.parameterName Get the report for a specific parameter
     * @param {String} opts.parameterValue Get a list of rules which have a specific parameter value
     * @param {String} opts.templateFilter Filter to return only rules using specified template
     * @param {Boolean} opts.includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Boolean} opts.checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed?
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleGet(opts) {
      return this.ruleGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unpublish all rules that this client has published to the given target.
     * 
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetClientDeleteWithHttpInfo(target, client) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientDelete");
      }

      let pathParams = {
        'target': target,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}/{client}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpublish all rules that this client has published to the given target.
     * 
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetClientDelete(target, client) {
      return this.ruleTargetClientDeleteWithHttpInfo(target, client)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate a new Rule Designer JSON
     * This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/RuleData} [ruleData] Specify the rule designer JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleDesignerResponse} and HTTP response
     */
    ruleTargetClientDesignerPutWithHttpInfo(target, client, opts) {
      opts = opts || {};
      let postBody = opts['ruleData'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientDesignerPut");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientDesignerPut");
      }

      let pathParams = {
        'target': target,
        'client': client
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleDesignerResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/designer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate a new Rule Designer JSON
     * This will validate a new Rule Designer JSON and return validations if problems detected without saving the rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/RuleData} opts.ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleDesignerResponse}
     */
    ruleTargetClientDesignerPut(target, client, opts) {
      return this.ruleTargetClientDesignerPutWithHttpInfo(target, client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about all rules published by this client to the given target.
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [sortProperty] List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} [sortDescending] List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} [createdRuleUrl] The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} [healthScore] Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} [includeStatistics] Should the results include the execution statistics for each rule? Default true
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {String} [parameterName] Get the report for a specific parameter
     * @param {String} [parameterValue] Get a list of rules which have a specific parameter value
     * @param {String} [templateFilter] Filter to return only rules using specified template
     * @param {Boolean} [includePublic] Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Boolean} [checkTemplateLatestVersion] Should a check to verify rule has the latest templates version be performed?
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetClientGetWithHttpInfo(target, client, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientGet");
      }

      let pathParams = {
        'target': target,
        'client': client
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'sortProperty': opts['sortProperty'],
        'sortDescending': opts['sortDescending'],
        'createdRuleUrl': opts['createdRuleUrl'],
        'healthScore': opts['healthScore'],
        'includeStatistics': opts['includeStatistics'],
        'searchText': opts['searchText'],
        'parameterName': opts['parameterName'],
        'parameterValue': opts['parameterValue'],
        'templateFilter': opts['templateFilter'],
        'includePublic': opts['includePublic'],
        'checkTemplateLatestVersion': opts['checkTemplateLatestVersion'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}/{client}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about all rules published by this client to the given target.
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} opts.sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} opts.createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} opts.healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} opts.includeStatistics Should the results include the execution statistics for each rule? Default true
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {String} opts.parameterName Get the report for a specific parameter
     * @param {String} opts.parameterValue Get a list of rules which have a specific parameter value
     * @param {String} opts.templateFilter Filter to return only rules using specified template
     * @param {Boolean} opts.includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Boolean} opts.checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed?
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetClientGet(target, client, opts) {
      return this.ruleTargetClientGetWithHttpInfo(target, client, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
     * This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetClientRulenameAutoloaderGetWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameAutoloaderGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameAutoloaderGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameAutoloaderGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/autoloader', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the autoloader JSON for a specific rule. This is normally used by the Rule plugin within Spoon
     * This will be parsed by the Spoon plugin so that a rule created as an autoloader can be edited
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetClientRulenameAutoloaderGet(target, client, rulename) {
      return this.ruleTargetClientRulenameAutoloaderGetWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Save the JSON for an autoloader rule
     * This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] Specify the autoloader JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleAndStateResponse} and HTTP response
     */
    ruleTargetClientRulenameAutoloaderPostWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameAutoloaderPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameAutoloaderPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameAutoloaderPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleAndStateResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/autoloader', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Save the JSON for an autoloader rule
     * This will automatically change the structure and the values within the rule so that it can load the data   required. Tis is normally called by the Rule plugin from within Spoon. Only rules that were created as an autoloader can   be altered.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body Specify the autoloader JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleAndStateResponse}
     */
    ruleTargetClientRulenameAutoloaderPost(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameAutoloaderPostWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Copy this rule to the given target.
     * A copy of this rule will be started in the given target.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/TargetEnum} [destinationtarget] The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred
     * @param {module:com.alterian.jo.model/DestinationTarget} [destinationTarget] Where the copy will run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleAndStateResponse} and HTTP response
     */
    ruleTargetClientRulenameCopytoPostWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['destinationTarget'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameCopytoPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameCopytoPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameCopytoPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
        'destinationtarget': opts['destinationtarget']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleAndStateResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/copyto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Copy this rule to the given target.
     * A copy of this rule will be started in the given target.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/TargetEnum} opts.destinationtarget The target to copy the rule to - must be different from the current target.  Can optionally be   provided in the requestBody as JSON instead if preferred
     * @param {module:com.alterian.jo.model/DestinationTarget} opts.destinationTarget Where the copy will run.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleAndStateResponse}
     */
    ruleTargetClientRulenameCopytoPost(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameCopytoPostWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about the data grid for a specific, published rule.
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {String} dataGridName Name of the Data Grid that will be updated
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} [format] If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/DataGridApiResponse} and HTTP response
     */
    ruleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(target, client, rulename, dataGridName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDatagridDataGridNameGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDatagridDataGridNameGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDatagridDataGridNameGet");
      }
      // verify the required parameter 'dataGridName' is set
      if (dataGridName === undefined || dataGridName === null) {
        throw new Error("Missing the required parameter 'dataGridName' when calling ruleTargetClientRulenameDatagridDataGridNameGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename,
        'dataGridName': dataGridName
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataGridApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about the data grid for a specific, published rule.
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {String} dataGridName Name of the Data Grid that will be updated
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/CsvEnum} opts.format If you want CSV, enter csv here
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/DataGridApiResponse}
     */
    ruleTargetClientRulenameDatagridDataGridNameGet(target, client, rulename, dataGridName, opts) {
      return this.ruleTargetClientRulenameDatagridDataGridNameGetWithHttpInfo(target, client, rulename, dataGridName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Enter new data for an exisiting data grid and update
     * If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {String} dataGridName Name of the Data Grid that will be updated
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.alterian.jo.model/DataGridDetails>} [dataGridDetails] Specify the data for the updated data grid. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleAndStateResponse} and HTTP response
     */
    ruleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(target, client, rulename, dataGridName, opts) {
      opts = opts || {};
      let postBody = opts['dataGridDetails'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDatagridDataGridNamePost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDatagridDataGridNamePost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDatagridDataGridNamePost");
      }
      // verify the required parameter 'dataGridName' is set
      if (dataGridName === undefined || dataGridName === null) {
        throw new Error("Missing the required parameter 'dataGridName' when calling ruleTargetClientRulenameDatagridDataGridNamePost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename,
        'dataGridName': dataGridName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleAndStateResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Enter new data for an exisiting data grid and update
     * If a rule already has an associated data grid, here it is possible to enter new data and change the grid   contents.  Note, you cannot add or remove columns but you can change their format.  Do a get on the data grid to get the   existing structure.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {String} dataGridName Name of the Data Grid that will be updated
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.alterian.jo.model/DataGridDetails>} opts.dataGridDetails Specify the data for the updated data grid. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleAndStateResponse}
     */
    ruleTargetClientRulenameDatagridDataGridNamePost(target, client, rulename, dataGridName, opts) {
      return this.ruleTargetClientRulenameDatagridDataGridNamePostWithHttpInfo(target, client, rulename, dataGridName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add new data grid rows to a rule's Data Grid
     * This is to append new data only. Existing data remains unchanged
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {String} dataGridName Name of the Data Grid that will be updated
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/DataGridRow} [dataGridRow] Data grid rows
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleAndStateResponse} and HTTP response
     */
    ruleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(target, client, rulename, dataGridName, opts) {
      opts = opts || {};
      let postBody = opts['dataGridRow'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost");
      }
      // verify the required parameter 'dataGridName' is set
      if (dataGridName === undefined || dataGridName === null) {
        throw new Error("Missing the required parameter 'dataGridName' when calling ruleTargetClientRulenameDatagridDataGridNameRowsPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename,
        'dataGridName': dataGridName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleAndStateResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/datagrid/{dataGridName}/rows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add new data grid rows to a rule's Data Grid
     * This is to append new data only. Existing data remains unchanged
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {String} dataGridName Name of the Data Grid that will be updated
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/DataGridRow} opts.dataGridRow Data grid rows
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleAndStateResponse}
     */
    ruleTargetClientRulenameDatagridDataGridNameRowsPost(target, client, rulename, dataGridName, opts) {
      return this.ruleTargetClientRulenameDatagridDataGridNameRowsPostWithHttpInfo(target, client, rulename, dataGridName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unpublish a specific rule.
     * 
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetClientRulenameDeleteWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDelete");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDelete");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpublish a specific rule.
     * 
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetClientRulenameDelete(target, client, rulename) {
      return this.ruleTargetClientRulenameDeleteWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetClientRulenameDesignerGetWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDesignerGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDesignerGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDesignerGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/designer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the rule designer JSON for a specific rule. This is normally used by the Rule designer user interface
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetClientRulenameDesignerGet(target, client, rulename) {
      return this.ruleTargetClientRulenameDesignerGetWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Save or validate the rule designer JSON for a rule
     * This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate] Set to 'True' to only validate the JSON (and not save it)
     * @param {module:com.alterian.jo.model/RuleData} [ruleData] Specify the rule designer JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleDesignerResponse} and HTTP response
     */
    ruleTargetClientRulenameDesignerPostWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['ruleData'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDesignerPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDesignerPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDesignerPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
        'validate': opts['validate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleDesignerResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/designer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Save or validate the rule designer JSON for a rule
     * This will change the structure and the values within the rule, as defined by the rule designer. If the   new rule structure is not valid and the rule is running then this call will fail unless you are only validating the rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Set to 'True' to only validate the JSON (and not save it)
     * @param {module:com.alterian.jo.model/RuleData} opts.ruleData Specify the rule designer JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleDesignerResponse}
     */
    ruleTargetClientRulenameDesignerPost(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameDesignerPostWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new rule via the rule designer JSON.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Boolean} [validate] Set to 'True' to only validate the JSON (and not save it)
     * @param {Boolean} [download] Download the posted rule designer JSON as a .ktr file
     * @param {String} [body] Specify the rule designer JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenameDesignerPutWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameDesignerPut");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameDesignerPut");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameDesignerPut");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
        'validate': opts['validate'],
        'download': opts['download']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/designer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add a new rule via the rule designer JSON.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.validate Set to 'True' to only validate the JSON (and not save it)
     * @param {Boolean} opts.download Download the posted rule designer JSON as a .ktr file
     * @param {String} opts.body Specify the rule designer JSON for the updated rule. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenameDesignerPut(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameDesignerPutWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about one specific, published rule.
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} [healthScore] Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} [includeStatistics] Should the results include the execution statistics for each rule? Default true
     * @param {Boolean} [checkTemplateLatestVersion] Should a check to verify rule has the latest templates version be performed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetClientRulenameGetWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
        'healthScore': opts['healthScore'],
        'includeStatistics': opts['includeStatistics'],
        'checkTemplateLatestVersion': opts['checkTemplateLatestVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about one specific, published rule.
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} opts.healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} opts.includeStatistics Should the results include the execution statistics for each rule? Default true
     * @param {Boolean} opts.checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed?
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetClientRulenameGet(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameGetWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * update the default values for parameters.
     * this will update the rule with new default parameters.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] key value pairs of param name and value. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleAndStateResponse} and HTTP response
     */
    ruleTargetClientRulenameParameterPostWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameParameterPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameParameterPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameParameterPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RuleAndStateResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/parameter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * update the default values for parameters.
     * this will update the rule with new default parameters.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body key value pairs of param name and value. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleAndStateResponse}
     */
    ruleTargetClientRulenameParameterPost(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameParameterPostWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pause this rule
     * Cause this rule to go to 'waiting' state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenamePauseDeleteWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenamePauseDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenamePauseDelete");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenamePauseDelete");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/pause', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause this rule
     * Cause this rule to go to 'waiting' state.  A rule that is paused will return an error code if it receives   traffic (i.e. is invoked). Restart the rule to allow it to serve traffic again
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenamePauseDelete(target, client, rulename) {
      return this.ruleTargetClientRulenamePauseDeleteWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Start or restart one specific, published rule.
     * Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenamePostWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenamePost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenamePost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenamePost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Start or restart one specific, published rule.
     * Cause this rule to be re-read from disk and restarted. If this rule was previously paused then it will be unpaused. If it was previously snoozed then it will be unsnoozed
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenamePost(target, client, rulename) {
      return this.ruleTargetClientRulenamePostWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the rule's priority weighting
     * This will set a new value for a rule's priority weighting
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] key value pairs of param name and value. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleAndStateResponse} and HTTP response
     */
    ruleTargetClientRulenamePriorityWeightingPostWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenamePriorityWeightingPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenamePriorityWeightingPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenamePriorityWeightingPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'example'];
      let returnType = RuleAndStateResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/priorityWeighting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the rule's priority weighting
     * This will set a new value for a rule's priority weighting
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body key value pairs of param name and value. Ensure wrapped in {}
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleAndStateResponse}
     */
    ruleTargetClientRulenamePriorityWeightingPost(target, client, rulename, opts) {
      return this.ruleTargetClientRulenamePriorityWeightingPostWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Perform extended actions to rules
     * 
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenameResetDeleteWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameResetDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameResetDelete");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameResetDelete");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/reset', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Perform extended actions to rules
     * 
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenameResetDelete(target, client, rulename) {
      return this.ruleTargetClientRulenameResetDeleteWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get JSON Schema representation of the data expected by the rule
     * Generates a JSON Schema object, following json-schema.org specification
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiJSONArrayResponse} and HTTP response
     */
    ruleTargetClientRulenameSampleDataGetWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameSampleDataGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameSampleDataGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameSampleDataGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiJSONArrayResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/sampleData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get JSON Schema representation of the data expected by the rule
     * Generates a JSON Schema object, following json-schema.org specification
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiJSONArrayResponse}
     */
    ruleTargetClientRulenameSampleDataGet(target, client, rulename) {
      return this.ruleTargetClientRulenameSampleDataGetWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Make this rule start snoozing
     * Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenameSnoozePostWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameSnoozePost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameSnoozePost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameSnoozePost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/snooze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Make this rule start snoozing
     * Snoozed rules are paused, and use no resources. They automatically start when invoked; there will be a short delay while the rule starts
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenameSnoozePost(target, client, rulename) {
      return this.ruleTargetClientRulenameSnoozePostWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all test data
     * Deletes all of user defined test data for this rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenameTestDataDeleteWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameTestDataDelete");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameTestDataDelete");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameTestDataDelete");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/testData', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete all test data
     * Deletes all of user defined test data for this rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenameTestDataDelete(target, client, rulename) {
      return this.ruleTargetClientRulenameTestDataDeleteWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the rule's test data and headers information
     * Returns the test data and header information as specified in the rule's Realtime Input step
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/TestDataResponse} and HTTP response
     */
    ruleTargetClientRulenameTestDataGetWithHttpInfo(target, client, rulename) {
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameTestDataGet");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameTestDataGet");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameTestDataGet");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestDataResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/testData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get the rule's test data and headers information
     * Returns the test data and header information as specified in the rule's Realtime Input step
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/TestDataResponse}
     */
    ruleTargetClientRulenameTestDataGet(target, client, rulename) {
      return this.ruleTargetClientRulenameTestDataGetWithHttpInfo(target, client, rulename)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add test data to rule
     * User defined test data rows will be stored for this rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.alterian.jo.model/TestData>} [testData] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/ApiResponse} and HTTP response
     */
    ruleTargetClientRulenameTestDataPostWithHttpInfo(target, client, rulename, opts) {
      opts = opts || {};
      let postBody = opts['testData'];
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetClientRulenameTestDataPost");
      }
      // verify the required parameter 'client' is set
      if (client === undefined || client === null) {
        throw new Error("Missing the required parameter 'client' when calling ruleTargetClientRulenameTestDataPost");
      }
      // verify the required parameter 'rulename' is set
      if (rulename === undefined || rulename === null) {
        throw new Error("Missing the required parameter 'rulename' when calling ruleTargetClientRulenameTestDataPost");
      }

      let pathParams = {
        'target': target,
        'client': client,
        'rulename': rulename
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/rule/{target}/{client}/{rulename}/testData', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add test data to rule
     * User defined test data rows will be stored for this rule
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {String} client Client name
     * @param {String} rulename Rule name
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.alterian.jo.model/TestData>} opts.testData 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/ApiResponse}
     */
    ruleTargetClientRulenameTestDataPost(target, client, rulename, opts) {
      return this.ruleTargetClientRulenameTestDataPostWithHttpInfo(target, client, rulename, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get information about all rules published by all clients to the given target
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {Number} [from] The zero-based index of the first item to return.
     * @param {Number} [to] The zero-based index of the last item to return.
     * @param {String} [sortProperty] List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} [sortDescending] List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} [createdRuleUrl] The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} [healthScore] Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} [includeStatistics] Should the results include the execution statistics for each rule? Default true
     * @param {String} [searchText] Filter results to those which contain this text
     * @param {String} [parameterName] Get the report for a specific parameter
     * @param {String} [parameterValue] Get a list of rules which have a specific parameter value
     * @param {String} [templateFilter] Filter to return only rules using specified template
     * @param {Boolean} [includePublic] Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Boolean} [checkTemplateLatestVersion] Should a check to verify rule has the latest templates version be performed?
     * @param {Array.<String>} [iClients] Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.alterian.jo.model/RuleList} and HTTP response
     */
    ruleTargetGetWithHttpInfo(target, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'target' is set
      if (target === undefined || target === null) {
        throw new Error("Missing the required parameter 'target' when calling ruleTargetGet");
      }

      let pathParams = {
        'target': target
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to'],
        'sortProperty': opts['sortProperty'],
        'sortDescending': opts['sortDescending'],
        'createdRuleUrl': opts['createdRuleUrl'],
        'healthScore': opts['healthScore'],
        'includeStatistics': opts['includeStatistics'],
        'searchText': opts['searchText'],
        'parameterName': opts['parameterName'],
        'parameterValue': opts['parameterValue'],
        'templateFilter': opts['templateFilter'],
        'includePublic': opts['includePublic'],
        'checkTemplateLatestVersion': opts['checkTemplateLatestVersion'],
        'iClients': this.apiClient.buildCollectionParam(opts['iClients'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RuleList;
      return this.apiClient.callApi(
        '/rule/{target}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get information about all rules published by all clients to the given target
     * Information returned is filtered by user permissions.
     * @param {module:com.alterian.jo.model/TargetEnum} target Target - is where rule is published.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.from The zero-based index of the first item to return.
     * @param {Number} opts.to The zero-based index of the last item to return.
     * @param {String} opts.sortProperty List of comma-separated values, by which the returned rules will be sorted by. The possible values   are: name, client, description, businessGoal, dataType, isConfidential, isVisible, isEditable, isForcedValue.
     * @param {String} opts.sortDescending List of comma-separated true/false values indicating either ascending (false) or descending (true)   order of each sortProperty
     * @param {String} opts.createdRuleUrl The url the rule was published to. Only rule with this url will be returned. In the format of:   target/client/rule_name
     * @param {module:com.alterian.jo.model/HealthScoreTimeFrame} opts.healthScore Time Frame for calculating the health score of a rule. Allowed values are hour, day, min
     * @param {Boolean} opts.includeStatistics Should the results include the execution statistics for each rule? Default true
     * @param {String} opts.searchText Filter results to those which contain this text
     * @param {String} opts.parameterName Get the report for a specific parameter
     * @param {String} opts.parameterValue Get a list of rules which have a specific parameter value
     * @param {String} opts.templateFilter Filter to return only rules using specified template
     * @param {Boolean} opts.includePublic Flag to indicate whether rules from the public client should be included in the results, please use   iClients=public instead
     * @param {Boolean} opts.checkTemplateLatestVersion Should a check to verify rule has the latest templates version be performed?
     * @param {Array.<String>} opts.iClients Only include these client(s)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.alterian.jo.model/RuleList}
     */
    ruleTargetGet(target, opts) {
      return this.ruleTargetGetWithHttpInfo(target, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
