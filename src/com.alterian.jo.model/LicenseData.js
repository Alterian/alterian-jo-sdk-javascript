/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QuotaUsageHistory from './QuotaUsageHistory';

/**
 * The LicenseData model module.
 * @module com.alterian.jo.model/LicenseData
 * @version 4.29.139
 */
class LicenseData {
    /**
     * Constructs a new <code>LicenseData</code>.
     * @alias module:com.alterian.jo.model/LicenseData
     * @param name {String} Name of the license
     * @param client {String} Name of the license client
     * @param startDate {Date} Start date of the license
     * @param conversationQuotaUsed {Number} Current conversation quota used
     * @param conversationQuota {Number} Conversation quota
     * @param blockOverage {Boolean} Does this license block overage once quota has been reached?
     * @param isActive {Boolean} 
     */
    constructor(name, client, startDate, conversationQuotaUsed, conversationQuota, blockOverage, isActive) { 
        
        LicenseData.initialize(this, name, client, startDate, conversationQuotaUsed, conversationQuota, blockOverage, isActive);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, client, startDate, conversationQuotaUsed, conversationQuota, blockOverage, isActive) { 
        obj['name'] = name;
        obj['client'] = client;
        obj['startDate'] = startDate;
        obj['conversationQuotaUsed'] = conversationQuotaUsed;
        obj['conversationQuota'] = conversationQuota;
        obj['blockOverage'] = blockOverage;
        obj['isActive'] = isActive;
    }

    /**
     * Constructs a <code>LicenseData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/LicenseData} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/LicenseData} The populated <code>LicenseData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseData();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], 'String');
            }
            if (data.hasOwnProperty('hasAvailableQuota')) {
                obj['hasAvailableQuota'] = ApiClient.convertToType(data['hasAvailableQuota'], 'Boolean');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('conversationQuotaUsed')) {
                obj['conversationQuotaUsed'] = ApiClient.convertToType(data['conversationQuotaUsed'], 'Number');
            }
            if (data.hasOwnProperty('conversationQuota')) {
                obj['conversationQuota'] = ApiClient.convertToType(data['conversationQuota'], 'Number');
            }
            if (data.hasOwnProperty('blockOverage')) {
                obj['blockOverage'] = ApiClient.convertToType(data['blockOverage'], 'Boolean');
            }
            if (data.hasOwnProperty('quotaUsageHistory')) {
                obj['quotaUsageHistory'] = ApiClient.convertToType(data['quotaUsageHistory'], [QuotaUsageHistory]);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('isActive')) {
                obj['isActive'] = ApiClient.convertToType(data['isActive'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['client'] && !(typeof data['client'] === 'string' || data['client'] instanceof String)) {
            throw new Error("Expected the field `client` to be a primitive type in the JSON string but got " + data['client']);
        }
        if (data['quotaUsageHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quotaUsageHistory'])) {
                throw new Error("Expected the field `quotaUsageHistory` to be an array in the JSON data but got " + data['quotaUsageHistory']);
            }
            // validate the optional field `quotaUsageHistory` (array)
            for (const item of data['quotaUsageHistory']) {
                QuotaUsageHistory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }

        return true;
    }


}

LicenseData.RequiredProperties = ["name", "client", "startDate", "conversationQuotaUsed", "conversationQuota", "blockOverage", "isActive"];

/**
 * Name of the license
 * @member {String} name
 */
LicenseData.prototype['name'] = undefined;

/**
 * Name of the license client
 * @member {String} client
 */
LicenseData.prototype['client'] = undefined;

/**
 * Has available quota remaining
 * @member {Boolean} hasAvailableQuota
 */
LicenseData.prototype['hasAvailableQuota'] = undefined;

/**
 * Start date of the license
 * @member {Date} startDate
 */
LicenseData.prototype['startDate'] = undefined;

/**
 * End date of the license
 * @member {Date} endDate
 */
LicenseData.prototype['endDate'] = undefined;

/**
 * Current conversation quota used
 * @member {Number} conversationQuotaUsed
 */
LicenseData.prototype['conversationQuotaUsed'] = undefined;

/**
 * Conversation quota
 * @member {Number} conversationQuota
 */
LicenseData.prototype['conversationQuota'] = undefined;

/**
 * Does this license block overage once quota has been reached?
 * @member {Boolean} blockOverage
 */
LicenseData.prototype['blockOverage'] = undefined;

/**
 * History of quota usage
 * @member {Array.<module:com.alterian.jo.model/QuotaUsageHistory>} quotaUsageHistory
 */
LicenseData.prototype['quotaUsageHistory'] = undefined;

/**
 * License signature
 * @member {String} signature
 */
LicenseData.prototype['signature'] = undefined;

/**
 * @member {Boolean} isActive
 */
LicenseData.prototype['isActive'] = undefined;






export default LicenseData;

