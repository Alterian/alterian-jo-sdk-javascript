/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Position from './Position';

/**
 * The FlowReport model module.
 * @module com.alterian.jo.model/FlowReport
 * @version 4.30.49
 */
class FlowReport {
    /**
     * Constructs a new <code>FlowReport</code>.
     * @alias module:com.alterian.jo.model/FlowReport
     */
    constructor() { 
        
        FlowReport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FlowReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/FlowReport} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/FlowReport} The populated <code>FlowReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FlowReport();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = Position.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('sourcePosition')) {
                obj['sourcePosition'] = ApiClient.convertToType(data['sourcePosition'], 'String');
            }
            if (data.hasOwnProperty('targetPosition')) {
                obj['targetPosition'] = ApiClient.convertToType(data['targetPosition'], 'String');
            }
            if (data.hasOwnProperty('markerEnd')) {
                obj['markerEnd'] = ApiClient.convertToType(data['markerEnd'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('class')) {
                obj['class'] = ApiClient.convertToType(data['class'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FlowReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FlowReport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          Position.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['sourcePosition'] && !(typeof data['sourcePosition'] === 'string' || data['sourcePosition'] instanceof String)) {
            throw new Error("Expected the field `sourcePosition` to be a primitive type in the JSON string but got " + data['sourcePosition']);
        }
        // ensure the json data is a string
        if (data['targetPosition'] && !(typeof data['targetPosition'] === 'string' || data['targetPosition'] instanceof String)) {
            throw new Error("Expected the field `targetPosition` to be a primitive type in the JSON string but got " + data['targetPosition']);
        }
        // ensure the json data is a string
        if (data['markerEnd'] && !(typeof data['markerEnd'] === 'string' || data['markerEnd'] instanceof String)) {
            throw new Error("Expected the field `markerEnd` to be a primitive type in the JSON string but got " + data['markerEnd']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['class'] && !(typeof data['class'] === 'string' || data['class'] instanceof String)) {
            throw new Error("Expected the field `class` to be a primitive type in the JSON string but got " + data['class']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
FlowReport.prototype['id'] = undefined;

/**
 * @member {String} label
 */
FlowReport.prototype['label'] = undefined;

/**
 * @member {module:com.alterian.jo.model/Position} position
 */
FlowReport.prototype['position'] = undefined;

/**
 * @member {Number} height
 */
FlowReport.prototype['height'] = undefined;

/**
 * @member {Number} width
 */
FlowReport.prototype['width'] = undefined;

/**
 * @member {String} sourcePosition
 */
FlowReport.prototype['sourcePosition'] = undefined;

/**
 * @member {String} targetPosition
 */
FlowReport.prototype['targetPosition'] = undefined;

/**
 * @member {String} markerEnd
 */
FlowReport.prototype['markerEnd'] = undefined;

/**
 * @member {String} source
 */
FlowReport.prototype['source'] = undefined;

/**
 * @member {String} type
 */
FlowReport.prototype['type'] = undefined;

/**
 * @member {String} class
 */
FlowReport.prototype['class'] = undefined;

/**
 * @member {String} target
 */
FlowReport.prototype['target'] = undefined;






export default FlowReport;

