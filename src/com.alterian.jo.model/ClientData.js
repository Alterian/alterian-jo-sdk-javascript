/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClientDetails from './ClientDetails';

/**
 * The ClientData model module.
 * @module com.alterian.jo.model/ClientData
 * @version 4.30.49
 */
class ClientData {
    /**
     * Constructs a new <code>ClientData</code>.
     * @alias module:com.alterian.jo.model/ClientData
     */
    constructor() { 
        
        ClientData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/ClientData} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/ClientData} The populated <code>ClientData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientData();

            if (data.hasOwnProperty('clients')) {
                obj['clients'] = ApiClient.convertToType(data['clients'], [ClientDetails]);
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ['String']);
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientData</code>.
     */
    static validateJSON(data) {
        if (data['clients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clients'])) {
                throw new Error("Expected the field `clients` to be an array in the JSON data but got " + data['clients']);
            }
            // validate the optional field `clients` (array)
            for (const item of data['clients']) {
                ClientDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['permissions'])) {
            throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:com.alterian.jo.model/ClientDetails>} clients
 */
ClientData.prototype['clients'] = undefined;

/**
 * @member {String} provider
 */
ClientData.prototype['provider'] = undefined;

/**
 * @member {Array.<String>} permissions
 */
ClientData.prototype['permissions'] = undefined;

/**
 * @member {String} username
 */
ClientData.prototype['username'] = undefined;






export default ClientData;

