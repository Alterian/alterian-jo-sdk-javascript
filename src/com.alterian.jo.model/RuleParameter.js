/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Parameter from './Parameter';
import PickListItem from './PickListItem';
import TargetValue from './TargetValue';

/**
 * The RuleParameter model module.
 * @module com.alterian.jo.model/RuleParameter
 * @version 4.30.49
 */
class RuleParameter {
    /**
     * Constructs a new <code>RuleParameter</code>.
     * @alias module:com.alterian.jo.model/RuleParameter
     * @implements module:com.alterian.jo.model/Parameter
     */
    constructor() { 
        Parameter.initialize(this);
        RuleParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuleParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/RuleParameter} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/RuleParameter} The populated <code>RuleParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleParameter();
            Parameter.constructFromObject(data, obj);

            if (data.hasOwnProperty('businessGoal')) {
                obj['businessGoal'] = ApiClient.convertToType(data['businessGoal'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = ApiClient.convertToType(data['client'], 'String');
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('globalParam')) {
                obj['globalParam'] = ApiClient.convertToType(data['globalParam'], 'Boolean');
            }
            if (data.hasOwnProperty('isConfidential')) {
                obj['isConfidential'] = ApiClient.convertToType(data['isConfidential'], 'Boolean');
            }
            if (data.hasOwnProperty('isEditable')) {
                obj['isEditable'] = ApiClient.convertToType(data['isEditable'], 'Boolean');
            }
            if (data.hasOwnProperty('isForcedValue')) {
                obj['isForcedValue'] = ApiClient.convertToType(data['isForcedValue'], 'Boolean');
            }
            if (data.hasOwnProperty('isVisible')) {
                obj['isVisible'] = ApiClient.convertToType(data['isVisible'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('picklistItems')) {
                obj['picklistItems'] = ApiClient.convertToType(data['picklistItems'], [PickListItem]);
            }
            if (data.hasOwnProperty('requiresAdmin')) {
                obj['requiresAdmin'] = ApiClient.convertToType(data['requiresAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [TargetValue]);
            }
            if (data.hasOwnProperty('units')) {
                obj['units'] = ApiClient.convertToType(data['units'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('parameterName')) {
                obj['parameterName'] = ApiClient.convertToType(data['parameterName'], 'String');
            }
            if (data.hasOwnProperty('usingGlobal')) {
                obj['usingGlobal'] = ApiClient.convertToType(data['usingGlobal'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['businessGoal'] && !(typeof data['businessGoal'] === 'string' || data['businessGoal'] instanceof String)) {
            throw new Error("Expected the field `businessGoal` to be a primitive type in the JSON string but got " + data['businessGoal']);
        }
        // ensure the json data is a string
        if (data['client'] && !(typeof data['client'] === 'string' || data['client'] instanceof String)) {
            throw new Error("Expected the field `client` to be a primitive type in the JSON string but got " + data['client']);
        }
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['picklistItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['picklistItems'])) {
                throw new Error("Expected the field `picklistItems` to be an array in the JSON data but got " + data['picklistItems']);
            }
            // validate the optional field `picklistItems` (array)
            for (const item of data['picklistItems']) {
                PickListItem.validateJSON(item);
            };
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                TargetValue.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['units'] && !(typeof data['units'] === 'string' || data['units'] instanceof String)) {
            throw new Error("Expected the field `units` to be a primitive type in the JSON string but got " + data['units']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['defaultValue'] && !(typeof data['defaultValue'] === 'string' || data['defaultValue'] instanceof String)) {
            throw new Error("Expected the field `defaultValue` to be a primitive type in the JSON string but got " + data['defaultValue']);
        }
        // ensure the json data is a string
        if (data['parameterName'] && !(typeof data['parameterName'] === 'string' || data['parameterName'] instanceof String)) {
            throw new Error("Expected the field `parameterName` to be a primitive type in the JSON string but got " + data['parameterName']);
        }

        return true;
    }


}



/**
 * @member {String} businessGoal
 */
RuleParameter.prototype['businessGoal'] = undefined;

/**
 * Client name
 * @member {String} client
 */
RuleParameter.prototype['client'] = undefined;

/**
 * The data type
 * @member {module:com.alterian.jo.model/RuleParameter.DataTypeEnum} dataType
 */
RuleParameter.prototype['dataType'] = undefined;

/**
 * Description of the global parameter
 * @member {String} description
 */
RuleParameter.prototype['description'] = undefined;

/**
 * @member {Boolean} globalParam
 */
RuleParameter.prototype['globalParam'] = undefined;

/**
 * Value is masked, e.g. for passwords/keys characters (true/false)
 * @member {Boolean} isConfidential
 */
RuleParameter.prototype['isConfidential'] = undefined;

/**
 * Values can be edited by users without GLOBALPARAMETER_CAN_CONFIGURE permission characters (true/false)
 * @member {Boolean} isEditable
 */
RuleParameter.prototype['isEditable'] = undefined;

/**
 * Rule parameter values will be overridden characters (true/false)
 * @member {Boolean} isForcedValue
 */
RuleParameter.prototype['isForcedValue'] = undefined;

/**
 * Should display characters (true/false)
 * @member {Boolean} isVisible
 */
RuleParameter.prototype['isVisible'] = undefined;

/**
 * Global param name
 * @member {String} name
 */
RuleParameter.prototype['name'] = undefined;

/**
 * Array of items to select from
 * @member {Array.<module:com.alterian.jo.model/PickListItem>} picklistItems
 */
RuleParameter.prototype['picklistItems'] = undefined;

/**
 * @member {Boolean} requiresAdmin
 */
RuleParameter.prototype['requiresAdmin'] = undefined;

/**
 * Each target/value
 * @member {Array.<module:com.alterian.jo.model/TargetValue>} targets
 */
RuleParameter.prototype['targets'] = undefined;

/**
 * @member {String} units
 */
RuleParameter.prototype['units'] = undefined;

/**
 * @member {String} url
 */
RuleParameter.prototype['url'] = undefined;

/**
 * @member {String} defaultValue
 */
RuleParameter.prototype['defaultValue'] = undefined;

/**
 * @member {String} parameterName
 */
RuleParameter.prototype['parameterName'] = undefined;

/**
 * @member {Boolean} usingGlobal
 */
RuleParameter.prototype['usingGlobal'] = undefined;


// Implement Parameter interface:
/**
 * @member {String} businessGoal
 */
Parameter.prototype['businessGoal'] = undefined;
/**
 * Client name
 * @member {String} client
 */
Parameter.prototype['client'] = undefined;
/**
 * The data type
 * @member {module:com.alterian.jo.model/Parameter.DataTypeEnum} dataType
 */
Parameter.prototype['dataType'] = undefined;
/**
 * Description of the global parameter
 * @member {String} description
 */
Parameter.prototype['description'] = undefined;
/**
 * @member {Boolean} globalParam
 */
Parameter.prototype['globalParam'] = undefined;
/**
 * Value is masked, e.g. for passwords/keys characters (true/false)
 * @member {Boolean} isConfidential
 */
Parameter.prototype['isConfidential'] = undefined;
/**
 * Values can be edited by users without GLOBALPARAMETER_CAN_CONFIGURE permission characters (true/false)
 * @member {Boolean} isEditable
 */
Parameter.prototype['isEditable'] = undefined;
/**
 * Rule parameter values will be overridden characters (true/false)
 * @member {Boolean} isForcedValue
 */
Parameter.prototype['isForcedValue'] = undefined;
/**
 * Should display characters (true/false)
 * @member {Boolean} isVisible
 */
Parameter.prototype['isVisible'] = undefined;
/**
 * Global param name
 * @member {String} name
 */
Parameter.prototype['name'] = undefined;
/**
 * Array of items to select from
 * @member {Array.<module:com.alterian.jo.model/PickListItem>} picklistItems
 */
Parameter.prototype['picklistItems'] = undefined;
/**
 * @member {Boolean} requiresAdmin
 */
Parameter.prototype['requiresAdmin'] = undefined;
/**
 * Each target/value
 * @member {Array.<module:com.alterian.jo.model/TargetValue>} targets
 */
Parameter.prototype['targets'] = undefined;
/**
 * @member {String} units
 */
Parameter.prototype['units'] = undefined;
/**
 * @member {String} url
 */
Parameter.prototype['url'] = undefined;



/**
 * Allowed values for the <code>dataType</code> property.
 * @enum {String}
 * @readonly
 */
RuleParameter['DataTypeEnum'] = {

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "date"
     * @const
     */
    "date": "date",

    /**
     * value: "picklist"
     * @const
     */
    "picklist": "picklist",

    /**
     * value: "orderedlist"
     * @const
     */
    "orderedlist": "orderedlist"
};



export default RuleParameter;

