/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Icon from './Icon';
import PickListItem from './PickListItem';
import RuleGroupParameterDefaultValue from './RuleGroupParameterDefaultValue';
import TargetValue from './TargetValue';

/**
 * The RuleGroupParameter model module.
 * @module com.alterian.jo.model/RuleGroupParameter
 * @version 4.30.49
 */
class RuleGroupParameter {
    /**
     * Constructs a new <code>RuleGroupParameter</code>.
     * @alias module:com.alterian.jo.model/RuleGroupParameter
     * @extends Object
     */
    constructor() { 
        
        RuleGroupParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RuleGroupParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/RuleGroupParameter} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/RuleGroupParameter} The populated <code>RuleGroupParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleGroupParameter();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('usingGlobal')) {
                obj['usingGlobal'] = ApiClient.convertToType(data['usingGlobal'], 'String');
            }
            if (data.hasOwnProperty('IsEditable')) {
                obj['IsEditable'] = ApiClient.convertToType(data['IsEditable'], 'Boolean');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Position')) {
                obj['Position'] = ApiClient.convertToType(data['Position'], 'Number');
            }
            if (data.hasOwnProperty('ReferencedProperty')) {
                obj['ReferencedProperty'] = ApiClient.convertToType(data['ReferencedProperty'], 'String');
            }
            if (data.hasOwnProperty('ReferencedRule')) {
                obj['ReferencedRule'] = ApiClient.convertToType(data['ReferencedRule'], 'String');
            }
            if (data.hasOwnProperty('PropertyType')) {
                obj['PropertyType'] = ApiClient.convertToType(data['PropertyType'], 'String');
            }
            if (data.hasOwnProperty('Units')) {
                obj['Units'] = ApiClient.convertToType(data['Units'], 'String');
            }
            if (data.hasOwnProperty('globalParam')) {
                obj['globalParam'] = ApiClient.convertToType(data['globalParam'], 'String');
            }
            if (data.hasOwnProperty('DefaultValue')) {
                obj['DefaultValue'] = RuleGroupParameterDefaultValue.constructFromObject(data['DefaultValue']);
            }
            if (data.hasOwnProperty('IsVisible')) {
                obj['IsVisible'] = ApiClient.convertToType(data['IsVisible'], 'Boolean');
            }
            if (data.hasOwnProperty('Templatename')) {
                obj['Templatename'] = ApiClient.convertToType(data['Templatename'], 'String');
            }
            if (data.hasOwnProperty('DataType')) {
                obj['DataType'] = ApiClient.convertToType(data['DataType'], 'String');
            }
            if (data.hasOwnProperty('Targets')) {
                obj['Targets'] = ApiClient.convertToType(data['Targets'], [TargetValue]);
            }
            if (data.hasOwnProperty('PickListItems')) {
                obj['PickListItems'] = ApiClient.convertToType(data['PickListItems'], [PickListItem]);
            }
            if (data.hasOwnProperty('IconAndColor')) {
                obj['IconAndColor'] = Icon.constructFromObject(data['IconAndColor']);
            }
            if (data.hasOwnProperty('TemplateId')) {
                obj['TemplateId'] = ApiClient.convertToType(data['TemplateId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleGroupParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleGroupParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['usingGlobal'] && !(typeof data['usingGlobal'] === 'string' || data['usingGlobal'] instanceof String)) {
            throw new Error("Expected the field `usingGlobal` to be a primitive type in the JSON string but got " + data['usingGlobal']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['ReferencedProperty'] && !(typeof data['ReferencedProperty'] === 'string' || data['ReferencedProperty'] instanceof String)) {
            throw new Error("Expected the field `ReferencedProperty` to be a primitive type in the JSON string but got " + data['ReferencedProperty']);
        }
        // ensure the json data is a string
        if (data['ReferencedRule'] && !(typeof data['ReferencedRule'] === 'string' || data['ReferencedRule'] instanceof String)) {
            throw new Error("Expected the field `ReferencedRule` to be a primitive type in the JSON string but got " + data['ReferencedRule']);
        }
        // ensure the json data is a string
        if (data['PropertyType'] && !(typeof data['PropertyType'] === 'string' || data['PropertyType'] instanceof String)) {
            throw new Error("Expected the field `PropertyType` to be a primitive type in the JSON string but got " + data['PropertyType']);
        }
        // ensure the json data is a string
        if (data['Units'] && !(typeof data['Units'] === 'string' || data['Units'] instanceof String)) {
            throw new Error("Expected the field `Units` to be a primitive type in the JSON string but got " + data['Units']);
        }
        // ensure the json data is a string
        if (data['globalParam'] && !(typeof data['globalParam'] === 'string' || data['globalParam'] instanceof String)) {
            throw new Error("Expected the field `globalParam` to be a primitive type in the JSON string but got " + data['globalParam']);
        }
        // validate the optional field `DefaultValue`
        if (data['DefaultValue']) { // data not null
          RuleGroupParameterDefaultValue.validateJSON(data['DefaultValue']);
        }
        // ensure the json data is a string
        if (data['Templatename'] && !(typeof data['Templatename'] === 'string' || data['Templatename'] instanceof String)) {
            throw new Error("Expected the field `Templatename` to be a primitive type in the JSON string but got " + data['Templatename']);
        }
        // ensure the json data is a string
        if (data['DataType'] && !(typeof data['DataType'] === 'string' || data['DataType'] instanceof String)) {
            throw new Error("Expected the field `DataType` to be a primitive type in the JSON string but got " + data['DataType']);
        }
        if (data['Targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Targets'])) {
                throw new Error("Expected the field `Targets` to be an array in the JSON data but got " + data['Targets']);
            }
            // validate the optional field `Targets` (array)
            for (const item of data['Targets']) {
                TargetValue.validateJSON(item);
            };
        }
        if (data['PickListItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PickListItems'])) {
                throw new Error("Expected the field `PickListItems` to be an array in the JSON data but got " + data['PickListItems']);
            }
            // validate the optional field `PickListItems` (array)
            for (const item of data['PickListItems']) {
                PickListItem.validateJSON(item);
            };
        }
        // validate the optional field `IconAndColor`
        if (data['IconAndColor']) { // data not null
          Icon.validateJSON(data['IconAndColor']);
        }
        // ensure the json data is a string
        if (data['TemplateId'] && !(typeof data['TemplateId'] === 'string' || data['TemplateId'] instanceof String)) {
            throw new Error("Expected the field `TemplateId` to be a primitive type in the JSON string but got " + data['TemplateId']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
RuleGroupParameter.prototype['Name'] = undefined;

/**
 * @member {String} usingGlobal
 */
RuleGroupParameter.prototype['usingGlobal'] = undefined;

/**
 * @member {Boolean} IsEditable
 */
RuleGroupParameter.prototype['IsEditable'] = undefined;

/**
 * @member {String} Description
 */
RuleGroupParameter.prototype['Description'] = undefined;

/**
 * @member {Number} Position
 */
RuleGroupParameter.prototype['Position'] = undefined;

/**
 * @member {String} ReferencedProperty
 */
RuleGroupParameter.prototype['ReferencedProperty'] = undefined;

/**
 * @member {String} ReferencedRule
 */
RuleGroupParameter.prototype['ReferencedRule'] = undefined;

/**
 * @member {String} PropertyType
 */
RuleGroupParameter.prototype['PropertyType'] = undefined;

/**
 * @member {String} Units
 */
RuleGroupParameter.prototype['Units'] = undefined;

/**
 * @member {String} globalParam
 */
RuleGroupParameter.prototype['globalParam'] = undefined;

/**
 * @member {module:com.alterian.jo.model/RuleGroupParameterDefaultValue} DefaultValue
 */
RuleGroupParameter.prototype['DefaultValue'] = undefined;

/**
 * @member {Boolean} IsVisible
 */
RuleGroupParameter.prototype['IsVisible'] = undefined;

/**
 * @member {String} Templatename
 */
RuleGroupParameter.prototype['Templatename'] = undefined;

/**
 * @member {String} DataType
 */
RuleGroupParameter.prototype['DataType'] = undefined;

/**
 * @member {Array.<module:com.alterian.jo.model/TargetValue>} Targets
 */
RuleGroupParameter.prototype['Targets'] = undefined;

/**
 * @member {Array.<module:com.alterian.jo.model/PickListItem>} PickListItems
 */
RuleGroupParameter.prototype['PickListItems'] = undefined;

/**
 * @member {module:com.alterian.jo.model/Icon} IconAndColor
 */
RuleGroupParameter.prototype['IconAndColor'] = undefined;

/**
 * @member {String} TemplateId
 */
RuleGroupParameter.prototype['TemplateId'] = undefined;






export default RuleGroupParameter;

