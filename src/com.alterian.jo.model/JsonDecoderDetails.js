/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonDecoderField from './JsonDecoderField';

/**
 * The JsonDecoderDetails model module.
 * @module com.alterian.jo.model/JsonDecoderDetails
 * @version 4.30.49
 */
class JsonDecoderDetails {
    /**
     * Constructs a new <code>JsonDecoderDetails</code>.
     * @alias module:com.alterian.jo.model/JsonDecoderDetails
     */
    constructor() { 
        
        JsonDecoderDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonDecoderDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/JsonDecoderDetails} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/JsonDecoderDetails} The populated <code>JsonDecoderDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonDecoderDetails();

            if (data.hasOwnProperty('expandSizeOneArrays')) {
                obj['expandSizeOneArrays'] = ApiClient.convertToType(data['expandSizeOneArrays'], 'Boolean');
            }
            if (data.hasOwnProperty('fieldToDecode')) {
                obj['fieldToDecode'] = ApiClient.convertToType(data['fieldToDecode'], 'String');
            }
            if (data.hasOwnProperty('stepName')) {
                obj['stepName'] = ApiClient.convertToType(data['stepName'], 'String');
            }
            if (data.hasOwnProperty('delimiter')) {
                obj['delimiter'] = ApiClient.convertToType(data['delimiter'], 'String');
            }
            if (data.hasOwnProperty('flattenMultipleRows')) {
                obj['flattenMultipleRows'] = ApiClient.convertToType(data['flattenMultipleRows'], 'Boolean');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [JsonDecoderField]);
            }
            if (data.hasOwnProperty('parseAsNameValue')) {
                obj['parseAsNameValue'] = ApiClient.convertToType(data['parseAsNameValue'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonDecoderDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonDecoderDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fieldToDecode'] && !(typeof data['fieldToDecode'] === 'string' || data['fieldToDecode'] instanceof String)) {
            throw new Error("Expected the field `fieldToDecode` to be a primitive type in the JSON string but got " + data['fieldToDecode']);
        }
        // ensure the json data is a string
        if (data['stepName'] && !(typeof data['stepName'] === 'string' || data['stepName'] instanceof String)) {
            throw new Error("Expected the field `stepName` to be a primitive type in the JSON string but got " + data['stepName']);
        }
        // ensure the json data is a string
        if (data['delimiter'] && !(typeof data['delimiter'] === 'string' || data['delimiter'] instanceof String)) {
            throw new Error("Expected the field `delimiter` to be a primitive type in the JSON string but got " + data['delimiter']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                JsonDecoderField.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Boolean} expandSizeOneArrays
 */
JsonDecoderDetails.prototype['expandSizeOneArrays'] = undefined;

/**
 * @member {String} fieldToDecode
 */
JsonDecoderDetails.prototype['fieldToDecode'] = undefined;

/**
 * @member {String} stepName
 */
JsonDecoderDetails.prototype['stepName'] = undefined;

/**
 * @member {String} delimiter
 */
JsonDecoderDetails.prototype['delimiter'] = undefined;

/**
 * @member {Boolean} flattenMultipleRows
 */
JsonDecoderDetails.prototype['flattenMultipleRows'] = undefined;

/**
 * @member {Array.<module:com.alterian.jo.model/JsonDecoderField>} fields
 */
JsonDecoderDetails.prototype['fields'] = undefined;

/**
 * @member {Boolean} parseAsNameValue
 */
JsonDecoderDetails.prototype['parseAsNameValue'] = undefined;






export default JsonDecoderDetails;

