/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FieldUsage model module.
 * @module com.alterian.jo.model/FieldUsage
 * @version 4.30.49
 */
class FieldUsage {
    /**
     * Constructs a new <code>FieldUsage</code>.
     * @alias module:com.alterian.jo.model/FieldUsage
     */
    constructor() { 
        
        FieldUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FieldUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/FieldUsage} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/FieldUsage} The populated <code>FieldUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldUsage();

            if (data.hasOwnProperty('step')) {
                obj['step'] = ApiClient.convertToType(data['step'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('other')) {
                obj['other'] = ApiClient.convertToType(data['other'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FieldUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FieldUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['step'] && !(typeof data['step'] === 'string' || data['step'] instanceof String)) {
            throw new Error("Expected the field `step` to be a primitive type in the JSON string but got " + data['step']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['other'] && !(typeof data['other'] === 'string' || data['other'] instanceof String)) {
            throw new Error("Expected the field `other` to be a primitive type in the JSON string but got " + data['other']);
        }

        return true;
    }


}



/**
 * @member {String} step
 */
FieldUsage.prototype['step'] = undefined;

/**
 * @member {String} type
 */
FieldUsage.prototype['type'] = undefined;

/**
 * @member {String} action
 */
FieldUsage.prototype['action'] = undefined;

/**
 * @member {String} other
 */
FieldUsage.prototype['other'] = undefined;






export default FieldUsage;

