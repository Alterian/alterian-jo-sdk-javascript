/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.30.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KettleFieldType from './KettleFieldType';

/**
 * The JsonDecoderField model module.
 * @module com.alterian.jo.model/JsonDecoderField
 * @version 4.30.49
 */
class JsonDecoderField {
    /**
     * Constructs a new <code>JsonDecoderField</code>.
     * @alias module:com.alterian.jo.model/JsonDecoderField
     */
    constructor() { 
        
        JsonDecoderField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonDecoderField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.alterian.jo.model/JsonDecoderField} obj Optional instance to populate.
     * @return {module:com.alterian.jo.model/JsonDecoderField} The populated <code>JsonDecoderField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonDecoderField();

            if (data.hasOwnProperty('outputName')) {
                obj['outputName'] = ApiClient.convertToType(data['outputName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = KettleFieldType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonDecoderField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonDecoderField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['outputName'] && !(typeof data['outputName'] === 'string' || data['outputName'] instanceof String)) {
            throw new Error("Expected the field `outputName` to be a primitive type in the JSON string but got " + data['outputName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['required'] && !(typeof data['required'] === 'string' || data['required'] instanceof String)) {
            throw new Error("Expected the field `required` to be a primitive type in the JSON string but got " + data['required']);
        }

        return true;
    }


}



/**
 * @member {String} outputName
 */
JsonDecoderField.prototype['outputName'] = undefined;

/**
 * @member {String} name
 */
JsonDecoderField.prototype['name'] = undefined;

/**
 * @member {module:com.alterian.jo.model/KettleFieldType} type
 */
JsonDecoderField.prototype['type'] = undefined;

/**
 * @member {module:com.alterian.jo.model/JsonDecoderField.RequiredEnum} required
 */
JsonDecoderField.prototype['required'] = undefined;





/**
 * Allowed values for the <code>required</code> property.
 * @enum {String}
 * @readonly
 */
JsonDecoderField['RequiredEnum'] = {

    /**
     * value: "Allowed"
     * @const
     */
    "Allowed": "Allowed"
};



export default JsonDecoderField;

