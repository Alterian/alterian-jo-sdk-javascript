/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyOrchestrationApi);
  }
}(this, function(expect, JourneyOrchestrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyOrchestrationApi.RulesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RulesApi', function() {
    describe('downloadRuleTargetClientRulenameGet', function() {
      it('should call downloadRuleTargetClientRulenameGet successfully', function(done) {
        //uncomment below and update the code to test downloadRuleTargetClientRulenameGet
        //instance.downloadRuleTargetClientRulenameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleGet', function() {
      it('should call ruleGet successfully', function(done) {
        //uncomment below and update the code to test ruleGet
        //instance.ruleGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientDelete', function() {
      it('should call ruleTargetClientDelete successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientDelete
        //instance.ruleTargetClientDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientDesignerPut', function() {
      it('should call ruleTargetClientDesignerPut successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientDesignerPut
        //instance.ruleTargetClientDesignerPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientGet', function() {
      it('should call ruleTargetClientGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientGet
        //instance.ruleTargetClientGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameAutoloaderGet', function() {
      it('should call ruleTargetClientRulenameAutoloaderGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameAutoloaderGet
        //instance.ruleTargetClientRulenameAutoloaderGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameAutoloaderPost', function() {
      it('should call ruleTargetClientRulenameAutoloaderPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameAutoloaderPost
        //instance.ruleTargetClientRulenameAutoloaderPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameCopytoPost', function() {
      it('should call ruleTargetClientRulenameCopytoPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameCopytoPost
        //instance.ruleTargetClientRulenameCopytoPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDatagridDataGridNameGet', function() {
      it('should call ruleTargetClientRulenameDatagridDataGridNameGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDatagridDataGridNameGet
        //instance.ruleTargetClientRulenameDatagridDataGridNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDatagridDataGridNamePost', function() {
      it('should call ruleTargetClientRulenameDatagridDataGridNamePost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDatagridDataGridNamePost
        //instance.ruleTargetClientRulenameDatagridDataGridNamePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDatagridDataGridNameRowsPost', function() {
      it('should call ruleTargetClientRulenameDatagridDataGridNameRowsPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDatagridDataGridNameRowsPost
        //instance.ruleTargetClientRulenameDatagridDataGridNameRowsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDelete', function() {
      it('should call ruleTargetClientRulenameDelete successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDelete
        //instance.ruleTargetClientRulenameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDesignerGet', function() {
      it('should call ruleTargetClientRulenameDesignerGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDesignerGet
        //instance.ruleTargetClientRulenameDesignerGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDesignerPost', function() {
      it('should call ruleTargetClientRulenameDesignerPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDesignerPost
        //instance.ruleTargetClientRulenameDesignerPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameDesignerPut', function() {
      it('should call ruleTargetClientRulenameDesignerPut successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameDesignerPut
        //instance.ruleTargetClientRulenameDesignerPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameGet', function() {
      it('should call ruleTargetClientRulenameGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameGet
        //instance.ruleTargetClientRulenameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameParameterPost', function() {
      it('should call ruleTargetClientRulenameParameterPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameParameterPost
        //instance.ruleTargetClientRulenameParameterPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenamePauseDelete', function() {
      it('should call ruleTargetClientRulenamePauseDelete successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenamePauseDelete
        //instance.ruleTargetClientRulenamePauseDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenamePost', function() {
      it('should call ruleTargetClientRulenamePost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenamePost
        //instance.ruleTargetClientRulenamePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenamePriorityWeightingPost', function() {
      it('should call ruleTargetClientRulenamePriorityWeightingPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenamePriorityWeightingPost
        //instance.ruleTargetClientRulenamePriorityWeightingPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameResetDelete', function() {
      it('should call ruleTargetClientRulenameResetDelete successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameResetDelete
        //instance.ruleTargetClientRulenameResetDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameSampleDataGet', function() {
      it('should call ruleTargetClientRulenameSampleDataGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameSampleDataGet
        //instance.ruleTargetClientRulenameSampleDataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameSnoozePost', function() {
      it('should call ruleTargetClientRulenameSnoozePost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameSnoozePost
        //instance.ruleTargetClientRulenameSnoozePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameTestDataDelete', function() {
      it('should call ruleTargetClientRulenameTestDataDelete successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameTestDataDelete
        //instance.ruleTargetClientRulenameTestDataDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameTestDataGet', function() {
      it('should call ruleTargetClientRulenameTestDataGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameTestDataGet
        //instance.ruleTargetClientRulenameTestDataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetClientRulenameTestDataPost', function() {
      it('should call ruleTargetClientRulenameTestDataPost successfully', function(done) {
        //uncomment below and update the code to test ruleTargetClientRulenameTestDataPost
        //instance.ruleTargetClientRulenameTestDataPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('ruleTargetGet', function() {
      it('should call ruleTargetGet successfully', function(done) {
        //uncomment below and update the code to test ruleTargetGet
        //instance.ruleTargetGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
