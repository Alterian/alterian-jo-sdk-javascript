/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyOrchestrationApi);
  }
}(this, function(expect, JourneyOrchestrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyOrchestrationApi.ClientApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClientApi', function() {
    describe('clientClientAliasAliasNameDelete', function() {
      it('should call clientClientAliasAliasNameDelete successfully', function(done) {
        //uncomment below and update the code to test clientClientAliasAliasNameDelete
        //instance.clientClientAliasAliasNameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientAliasAliasNameGet', function() {
      it('should call clientClientAliasAliasNameGet successfully', function(done) {
        //uncomment below and update the code to test clientClientAliasAliasNameGet
        //instance.clientClientAliasAliasNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientAliasAliasNameTargetRuleorgroupPost', function() {
      it('should call clientClientAliasAliasNameTargetRuleorgroupPost successfully', function(done) {
        //uncomment below and update the code to test clientClientAliasAliasNameTargetRuleorgroupPost
        //instance.clientClientAliasAliasNameTargetRuleorgroupPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientAliasAliasNameTargetRuleorgroupPut', function() {
      it('should call clientClientAliasAliasNameTargetRuleorgroupPut successfully', function(done) {
        //uncomment below and update the code to test clientClientAliasAliasNameTargetRuleorgroupPut
        //instance.clientClientAliasAliasNameTargetRuleorgroupPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientAliasGet', function() {
      it('should call clientClientAliasGet successfully', function(done) {
        //uncomment below and update the code to test clientClientAliasGet
        //instance.clientClientAliasGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientCopyDestinationPut', function() {
      it('should call clientClientCopyDestinationPut successfully', function(done) {
        //uncomment below and update the code to test clientClientCopyDestinationPut
        //instance.clientClientCopyDestinationPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientDelete', function() {
      it('should call clientClientDelete successfully', function(done) {
        //uncomment below and update the code to test clientClientDelete
        //instance.clientClientDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientGet', function() {
      it('should call clientClientGet successfully', function(done) {
        //uncomment below and update the code to test clientClientGet
        //instance.clientClientGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientPost', function() {
      it('should call clientClientPost successfully', function(done) {
        //uncomment below and update the code to test clientClientPost
        //instance.clientClientPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientClientPut', function() {
      it('should call clientClientPut successfully', function(done) {
        //uncomment below and update the code to test clientClientPut
        //instance.clientClientPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientCopySourcePut', function() {
      it('should call clientCopySourcePut successfully', function(done) {
        //uncomment below and update the code to test clientCopySourcePut
        //instance.clientCopySourcePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clientGet', function() {
      it('should call clientGet successfully', function(done) {
        //uncomment below and update the code to test clientGet
        //instance.clientGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
