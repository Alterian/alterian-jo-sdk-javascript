/**
 * Journey Orchestration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.29.139
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.JourneyOrchestrationApi);
  }
}(this, function(expect, JourneyOrchestrationApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new JourneyOrchestrationApi.ClusterApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClusterApi', function() {
    describe('clusterDecommissionDelete', function() {
      it('should call clusterDecommissionDelete successfully', function(done) {
        //uncomment below and update the code to test clusterDecommissionDelete
        //instance.clusterDecommissionDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterDelete', function() {
      it('should call clusterDelete successfully', function(done) {
        //uncomment below and update the code to test clusterDelete
        //instance.clusterDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterDiscoverPost', function() {
      it('should call clusterDiscoverPost successfully', function(done) {
        //uncomment below and update the code to test clusterDiscoverPost
        //instance.clusterDiscoverPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterFlushPost', function() {
      it('should call clusterFlushPost successfully', function(done) {
        //uncomment below and update the code to test clusterFlushPost
        //instance.clusterFlushPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterGet', function() {
      it('should call clusterGet successfully', function(done) {
        //uncomment below and update the code to test clusterGet
        //instance.clusterGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterPost', function() {
      it('should call clusterPost successfully', function(done) {
        //uncomment below and update the code to test clusterPost
        //instance.clusterPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterPut', function() {
      it('should call clusterPut successfully', function(done) {
        //uncomment below and update the code to test clusterPut
        //instance.clusterPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterReregisterPost', function() {
      it('should call clusterReregisterPost successfully', function(done) {
        //uncomment below and update the code to test clusterReregisterPost
        //instance.clusterReregisterPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterStreamGet', function() {
      it('should call clusterStreamGet successfully', function(done) {
        //uncomment below and update the code to test clusterStreamGet
        //instance.clusterStreamGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterStreamThroughputGet', function() {
      it('should call clusterStreamThroughputGet successfully', function(done) {
        //uncomment below and update the code to test clusterStreamThroughputGet
        //instance.clusterStreamThroughputGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('clusterStreamThroughputPost', function() {
      it('should call clusterStreamThroughputPost successfully', function(done) {
        //uncomment below and update the code to test clusterStreamThroughputPost
        //instance.clusterStreamThroughputPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
